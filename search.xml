<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>非关系型数据库 Redis的安装使用</title>
      <link href="/post/e4c85558.html"/>
      <url>/post/e4c85558.html</url>
      
        <content type="html"><![CDATA[<h1 id="NoSql非关系型数据库"><a href="#NoSql非关系型数据库" class="headerlink" title="NoSql非关系型数据库"></a>NoSql非关系型数据库</h1><p>Not Only Sql  不仅仅是sql</p><p>而sql是用来操作关系型数据库的，也就是说我们以后不仅仅要使用关系型数据库还要使用非关系型数据库</p><p>为什么要使用非关系型数据库：</p><p>我们实际开发的时候为了减轻关系型数据库的压力，可以使用非关系型数据库配合关系型数据库使用，基本都是用来作为关系型数据库的备份</p><h2 id="NoSql数据库类型"><a href="#NoSql数据库类型" class="headerlink" title="NoSql数据库类型"></a>NoSql数据库类型</h2><h3 id="键值型（Key-Value）数据库-Redis-x2F-Memcached"><a href="#键值型（Key-Value）数据库-Redis-x2F-Memcached" class="headerlink" title="键值型（Key-Value）数据库[Redis&#x2F;Memcached]"></a>键值型（Key-Value）数据库[Redis&#x2F;Memcached]</h3><p>适用场景：</p><p>储存用户信息，比如会话、配置文件、参数、购物车等等。这些信息一般都和ID（键）挂钩，这种情景下键值数据库是个很好的选择。</p><p>不适用场景：</p><p>1.取代通过键查询，而是通过值来查询。Key-Value数据库中根本没有通过值查询的途径</p><p>2.需要储存数据之间的关系。在Key-Value数据库中不能通过两个或以上的键来关联数据。</p><p>3.事务的支持。在Key-Value数据库中故障产生时不可以进行回滚。</p><h3 id="文档型（Document-Oriented）数据库-MongoDB-ES"><a href="#文档型（Document-Oriented）数据库-MongoDB-ES" class="headerlink" title="文档型（Document-Oriented）数据库[MongoDB] ES"></a>文档型（Document-Oriented）数据库[MongoDB] ES</h3><p>数据可以使用XML、<strong>JSON</strong>或者JSONB等多种形式存储。 {“name”:“abc”}</p><p>适用场景：1.日志 2.分析</p><p>不适用场景：不支持事务</p><h3 id="列存储（Wide-Column-Store-x2F-Column-Family）数据库-HBASE"><a href="#列存储（Wide-Column-Store-x2F-Column-Family）数据库-HBASE" class="headerlink" title="列存储（Wide Column Store&#x2F;Column-Family）数据库[HBASE]"></a>列存储（Wide Column Store&#x2F;Column-Family）数据库[HBASE]</h3><p>列存储数据库将数据储存在列族（column family）中，一个列族存储经常被一起查询的相关数据。举个例子，如果我们有一个Person类，我们通常会一起查询他们的姓名和年龄而不是薪资。这种情况下，姓名和年龄就会被放入一个列族中，而薪资则在另一个列族中。</p><p>适用场景：1.日志 2.博客平台,我们储存每个信息到不同的列族中。举个例子，标签可以储存在一个，类别可以在一个，而文章则在另一个。</p><p>不适用场景：1.ACID事务 2.原型设计。在模型设计之初，我们根本不可能去预测它的查询方式，而一旦查询方式改变，我们就必须重新设计列族。</p><h3 id="图（Graph-Oriented）数据库-Neo4J-infoGird"><a href="#图（Graph-Oriented）数据库-Neo4J-infoGird" class="headerlink" title="图（Graph-Oriented）数据库[Neo4J,infoGird]"></a>图（Graph-Oriented）数据库[Neo4J,infoGird]</h3><p>适用范围很小，主要用用网络拓扑分析 如脉脉的人员关系图等</p><h2 id="常见的NoSql数据库"><a href="#常见的NoSql数据库" class="headerlink" title="常见的NoSql数据库"></a>常见的NoSql数据库</h2><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image002.png" alt="img">  </p><h2 id="总结NoSql"><a href="#总结NoSql" class="headerlink" title="总结NoSql"></a>总结NoSql</h2><ol><li>NoSql就是为了性能而诞生的</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指的是NoSql的读写性能非常的高 因为是将数据存放在内存中的</span><br></pre></td></tr></table></figure><ol><li>NoSql是Sql的阉割版本，是为了解决行业内特定问题</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoSql基本都是配置关系型数据库使用</span><br></pre></td></tr></table></figure><ol><li><p>NoSql没有特定的数据结构定义，使用时不需要表</p></li><li><p>NoSql对事物的支持很差：在Key-Value数据库中故障产生时不可以进行回滚。 </p></li><li><p>只能通过值查询</p><hr></li></ol><h1 id="Redis数据库的介绍"><a href="#Redis数据库的介绍" class="headerlink" title="Redis数据库的介绍"></a>Redis数据库的介绍</h1><p>Remote Dictionary Server 远程字典服务器</p><p>Redis以key-value形式操作数据库，数据存放在内存中</p><p>支持持久化：</p><p>​1. rdb     周期性的将存放的数据写磁盘文件</p><p>​2. aof     将对redis的所有写操作指令记录到磁盘文件</p><h2 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h2><p>redis的读取速度：110000次&#x2F;秒   写速度：81000次&#x2F;秒</p><p>为什么快</p><ul><li>单线程不需要线程切换开销，</li><li>没有锁的竞争，</li><li>多路复用</li></ul><h2 id="支持多种数据类型："><a href="#支持多种数据类型：" class="headerlink" title="支持多种数据类型："></a>支持多种数据类型：</h2><ul><li>string </li><li>list </li><li>hash </li><li>set </li><li>zset</li><li>。。。</li></ul><p>支持就持久化   主从复制   集群</p><hr><h2 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h2><h3 id="数据缓存（提高访问性能）"><a href="#数据缓存（提高访问性能）" class="headerlink" title="数据缓存（提高访问性能）"></a>数据缓存（提高访问性能）</h3><p>将一些数据在短时间之内不会发生变化，而且它们还要被频繁访问，为了提高用户的请求速度和降低网站的负载，降低数据库的读写次数，就把这些数据放到缓存中。</p><h3 id="会话缓存（共享session）"><a href="#会话缓存（共享session）" class="headerlink" title="会话缓存（共享session）"></a>会话缓存（共享session）</h3><p>（session cache，保存web会话信息）</p><h3 id="排行榜-x2F-计数器"><a href="#排行榜-x2F-计数器" class="headerlink" title="排行榜&#x2F;计数器"></a>排行榜&#x2F;计数器</h3><p>（NGINX+lua+redis计数器进行IP自动封禁）</p><h3 id="消息队列（ActiveMQ-x2F-RabbitMQ-x2F-Kafka-x2F-RocketMQ）"><a href="#消息队列（ActiveMQ-x2F-RabbitMQ-x2F-Kafka-x2F-RocketMQ）" class="headerlink" title="消息队列（ActiveMQ&#x2F;RabbitMQ&#x2F;Kafka&#x2F;RocketMQ）"></a>消息队列（ActiveMQ&#x2F;RabbitMQ&#x2F;Kafka&#x2F;RocketMQ）</h3><p>（构建实时消息系统，聊天，群聊）</p><p><strong>重点做缓存（数据，用户信息）</strong></p><h1 id="redis的安装与配置"><a href="#redis的安装与配置" class="headerlink" title="redis的安装与配置"></a>redis的安装与配置</h1><ul><li><strong>安装gcc  目地是编译软件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ </span><br></pre></td></tr></table></figure><ul><li><strong>解压安装包</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure><ul><li><strong>把解压的文件copy到&#x2F;usr&#x2F;local&#x2F;src里面进行配置</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/software/redis-5.0.7 /usr/local/src/redis</span><br></pre></td></tr></table></figure><ul><li><strong>打开&#x2F;usr&#x2F;local&#x2F;src&#x2F;redis&#x2F;deps进行编译依赖项</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进入redis的deps目录下</span><br><span class="line">cd /usr/local/src/redis/deps</span><br><span class="line">编辑依赖</span><br><span class="line">make hiredis lua jemalloc linenoise</span><br><span class="line">进入redis目录下</span><br><span class="line">cd /usr/local/src/redis</span><br><span class="line">执行配置命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li><strong>将配置完成的软件安装到&#x2F;usr&#x2F;local&#x2F;redis里面</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建文件夹</span><br><span class="line">mkdir  -p /usr/local/redis</span><br><span class="line">进行安装</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><p>​看到次界面则表示安装成功</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image002.jpg" alt="img"> </p><ul><li><strong>验证是否成功</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis/bin</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>看到如下启动文件就可以了</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image001-1655539515894.png" alt="img"> </p><ul><li><strong>把配置文件移动到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf目录</strong></li></ul><blockquote><p>创建目录</p><p>mkdir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf</p><p>复制</p><p>cp &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis&#x2F;redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf </p></blockquote><ul><li><strong>启动Redis</strong></li></ul><blockquote><p>进入软件启动文件位置</p><p>cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin </p><p>启动软件（指定配置文件）</p><p>.&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf</p></blockquote><p>看见下图则表示启动成功</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image002-1655540061646.png" alt="img"> </p><ul><li><strong>默认情况，Redis是不能在后台运行，我们需要把redis放在后台运行</strong></li></ul><blockquote><p>更改配置文件</p><p> vi &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf</p></blockquote><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image002-1655540162096.png" alt="img"> </p><ul><li><strong>退出redis并重启</strong></li></ul><blockquote><p>退出</p><p>cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin<br>.&#x2F;redis-cli shutdown</p><p>或者</p><p>ps -ef|grep redis    </p><p>kill -9 进程号 </p><p>启动</p><p>.&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf </p><p>查看进程</p><p>ps -ef|grep redis</p></blockquote><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/08_redis/assets/clip_image001-1655540525825.png" alt="img"> </p><p>可以看到在6379端口号已启动了</p><h2 id="客户端连接与退出"><a href="#客户端连接与退出" class="headerlink" title="客户端连接与退出"></a>客户端连接与退出</h2><ul><li>连接：</li></ul><blockquote><p>.&#x2F;redis-cli<br>其实相当于进入本机的redis服务器   .&#x2F;redis-cli -h 127.0.0.1 -p 6379 同时默认进入的数据库为 0 数据库（有0~15）<br>如果连接的redis不是本机的或者端口号不是6379 则需要使用-h（ip）或者-p（端口）<br>在进入客户端后，测试连接是否成功： <code>ping</code>  如果响应 <code>PONG</code>  表示发送数据与接收数据成功</p></blockquote><ul><li>退出客户端：</li></ul><blockquote><p>exit</p></blockquote><h2 id="退出服务端"><a href="#退出服务端" class="headerlink" title="退出服务端"></a>退出服务端</h2><p>链接客户端的退出只是指退出操作界面；此退出表示退出服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标准退出：退出服务器，在客户端使用指令 `shutdown`</span><br><span class="line"></span><br><span class="line">强制退出： kill -9 redid的进程号</span><br></pre></td></tr></table></figure><h2 id="设置redis开机自启"><a href="#设置redis开机自启" class="headerlink" title="设置redis开机自启"></a>设置redis开机自启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br><span class="line">加入redis的绝对路径</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><h2 id="bin文件介绍"><a href="#bin文件介绍" class="headerlink" title="bin文件介绍"></a>bin文件介绍</h2><p>redis-server   redis服务器的启动程序</p><p>redis-cli          redis客户端的启动程序</p><p>redis-rdb       与redis的rdb持久化方案相关的程序（定时）</p><p>redis-aof       与redis的aof持久化方案相关的程序（监视）</p><p>redis-benchmark  redis的压力测试工具</p><p>redis-sentinel       redis的哨兵模式程序</p><h1 id="配置长参数详解"><a href="#配置长参数详解" class="headerlink" title="配置长参数详解"></a>配置长参数详解</h1><table><thead><tr><th align="center">daemonize：</th><th align="left">如需要在后台运行，把该项的值改为yes</th></tr></thead><tbody><tr><td align="center">pdifile：</td><td align="left">把pid文件放在&#x2F;var&#x2F;run&#x2F;redis.pid，可以配置到其他地址</td></tr><tr><td align="center">bind：</td><td align="left">指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</td></tr><tr><td align="center">port：</td><td align="left">监听端口，默认为6379</td></tr><tr><td align="center">timeout：</td><td align="left">设置客户端连接时的超时时间，单位为秒</td></tr><tr><td align="center">loglevel：</td><td align="left">等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</td></tr><tr><td align="center">logfile：</td><td align="left">配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上</td></tr><tr><td align="center">database：</td><td align="left">设置数据库的个数，默认使用的数据库是0</td></tr><tr><td align="center">save：</td><td align="left">设置redis进行数据库镜像的频率</td></tr><tr><td align="center">rdbcompression：</td><td align="left">在进行镜像备份时，是否进行压缩</td></tr><tr><td align="center">dbfilename：</td><td align="left">镜像备份文件的文件名</td></tr><tr><td align="center">dir：</td><td align="left">数据库镜像备份的文件放置的路径</td></tr><tr><td align="center">slaveof：</td><td align="left">设置该数据库为其他数据库的从数据库</td></tr><tr><td align="center">masterauth：</td><td align="left">当主数据库连接需要密码验证时，在这里设定</td></tr><tr><td align="center">requirepass：</td><td align="left">设置客户端连接后进行任何其他指定前需要使用的密码</td></tr><tr><td align="center">maxclients：</td><td align="left">限制同时连接的客户端数量</td></tr><tr><td align="center">maxmemory：</td><td align="left">设置redis能够使用的最大内存</td></tr><tr><td align="center">appendonly：</td><td align="left">开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动 时，会从该文件恢复出之前的状态</td></tr><tr><td align="center">appendfsync：</td><td align="left">设置appendonly.aof文件进行同步的频率</td></tr><tr><td align="center">vm_enabled：</td><td align="left">是否开启虚拟内存支持</td></tr><tr><td align="center">vm_swap_file：</td><td align="left">设置虚拟内存的交换文件的路径</td></tr><tr><td align="center">vm_max_momery：</td><td align="left">设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</td></tr><tr><td align="center">vm_page_size：</td><td align="left">设置虚拟内存页的大小</td></tr><tr><td align="center">vm_pages：</td><td align="left">设置交换文件的总的page数量</td></tr><tr><td align="center">vm_max_thrrads：</td><td align="left">设置vm IO同时使用的线程数量</td></tr></tbody></table><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><table><thead><tr><th align="center">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">keys *</td><td align="left">查询当前数据中所有的key</td></tr><tr><td align="center">select index</td><td align="left">切换数据库 （在进入redis客服端后使用，redis服务器默认有16个数据库[0~15]）</td></tr><tr><td align="center">flushdb</td><td align="left">清空当前数据库</td></tr><tr><td align="center">flshall</td><td align="left">清空所有数据库</td></tr><tr><td align="center">del key</td><td align="left">删除指定key对应的数据</td></tr><tr><td align="center">expire key 10</td><td align="left">设置指定key对应的数据的过期时间</td></tr><tr><td align="center">pexpire key 1000</td><td align="left">设置key的过期时间单位是毫秒</td></tr><tr><td align="center">persist key</td><td align="left">删除过期时间</td></tr><tr><td align="center">ttl key</td><td align="left">查看指定key对应数据的过期时间。  -1：表示没有过期时间  -2：表示已经过期</td></tr><tr><td align="center">type key</td><td align="left">类型</td></tr><tr><td align="center">exists key</td><td align="left">判断是否存在key</td></tr></tbody></table><h1 id="操作不同的数据类型"><a href="#操作不同的数据类型" class="headerlink" title="操作不同的数据类型"></a>操作不同的数据类型</h1><h2 id="string类型的数据"><a href="#string类型的数据" class="headerlink" title="string类型的数据"></a>string类型的数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">set key value  存放key-vulue </span><br><span class="line">get key  获取key的值</span><br><span class="line">getset name new_cxx 设置值，返回旧值</span><br><span class="line">mset key1 v1 key2 v2 批量设置</span><br><span class="line">mget key1 key2 批量获取</span><br><span class="line">setnx key value 不存在就插入（set if not exists） 分布式锁</span><br><span class="line">incr age 递增</span><br><span class="line">incrby age 10 递增</span><br><span class="line">decr age 递减</span><br><span class="line">decrby age 10 递减</span><br><span class="line">strlen 长度</span><br><span class="line">getrange name 0 -1 字符串分段   0 -1是全部   0 -2  ==n-1</span><br><span class="line">setrange key index value 从index开始替换value</span><br><span class="line">incrbyfloat 增减浮点数</span><br><span class="line">append 追加</span><br><span class="line">object encoding key  得到key 的类型  string里面有三种编码</span><br><span class="line">int  用于能够作用64位有符号整数表示的字符串</span><br><span class="line">embstr 用于长度小于或等于44字节  Redis3.x中是39字节，这种类型的编码在内存使用  时性能更好</span><br><span class="line">raw  用于长度大于44字节的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="list类型的数据"><a href="#list类型的数据" class="headerlink" title="list类型的数据"></a>list类型的数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">lpush key  values    l=left    r =rigth     </span><br><span class="line">lpush mylist a b c 左插入</span><br><span class="line">    rpush mylist x y z 右插入</span><br><span class="line">    lrange mylist 0 -1 取出数据集合  0 -1是取出所有   0   1取第一个和第二个</span><br><span class="line">    lpop mylist 弹出集合最后一个元素  弹出之后就没有了哦</span><br><span class="line">    rpop mylist 弹出第一个元素  弹出之后就没有了哦</span><br><span class="line">    lrem mylist count value 删除</span><br><span class="line">        |-COUNT 的值可以是以下几种：</span><br><span class="line">            |--count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。</span><br><span class="line">            |--count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。</span><br><span class="line">            |--count = 0 : 移除表中所有与 VALUE 相等的值。</span><br><span class="line">    lindex mylist 2 指定索引的值</span><br><span class="line">    llen mylist 长度  </span><br><span class="line">    lset mylist 2 n 索引设值</span><br><span class="line">    ltrim mylist 0 4   </span><br><span class="line">            |--对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span><br><span class="line">下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 </span><br><span class="line">你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</span><br><span class="line">    linsert mylist before a 插入</span><br><span class="line">    linsert mylist after a 插入</span><br><span class="line">            |--命令用于在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。 </span><br><span class="line">当列表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。</span><br><span class="line">    rpoplpush list list2 转移列表的数据</span><br><span class="line">            |--命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/post/68689ca1.html"/>
      <url>/post/68689ca1.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>sadfhsdsdfsdfsd</p><blockquote><p>sdfsdfsdfds</p><p>fsdfsdfsdfsdlkf</p><blockquote><p>sdfsdf ‘dsfsd</p></blockquote></blockquote></li></ul><p><code>fsdfas</code> (sdfsdsdfsd) </p><table><thead><tr><th align="center">sdfjl</th><th align="center">sdfhjsdal</th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center">fsdfsdfsdfsdf</td><td align="center">sdfh</td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td><td></td><td></td></tr></tbody></table><p>| 士大夫发射点 | 士大夫撒旦 |<br>|||<br>||</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">​```mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>速度发货速度</p><hr><blockquote><p>而发生</p></blockquote><ul><li>士大夫胜多负少</li></ul><ol><li>撒旦发射点发射点</li><li><ul><li>大师傅士大夫撒旦</li></ul></li></ol><p><code>dfsfjdskl jljdlsfjkld</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">士大夫但是速度加快fsdfsda</span><br><span class="line">sdfsd sdfsdf sdf sd sdfsdgasdgasd </span><br><span class="line">sdfsad sdfsd sda </span><br><span class="line">sdfgasd sdf </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/post/c24675b4.html"/>
      <url>/post/c24675b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><p>数据库：存储数据的仓库</p><p>之前我们可以使用数组、集合、IO存储数据。其中数组和集合的数据在内存中，IO可以将数据持久化存储。</p><p>我们在实际开发中很多业务是需要将数据持久化的，此时使用IO将数据存储成一个普通的文件行不行？</p><p>可以，但是不高效。比如我们将用户的数据存储成一个txt文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1000 张三 20 男 北京 海淀区</span><br><span class="line">1002 李四 21 男 上海 浦东区</span><br><span class="line">1003 韩梅梅 22 女 成都 武侯区</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>此时如果我们需要查询年龄大于21岁的用户有哪些。我们需要将文本中的每一行信息读取出来，然后按照空格分割，得到age字符串，再将字符串转成int，然后做比较。这样操作会发现数据越多处理效率越低。</p><p>如果我们需要将1003的地址修改成重庆 渝北区，发现需要将数据全部读取，修改后的数据重新覆盖整个旧文件，依然效率低下。</p><p>以上的操作之所以效率低下，是因为我们存储数据的数据结构没有专门的进行设计，就是一个普通的文本文件，所有数据在一起，全部是String。</p><p>为了解决在实际开发中操作数据的高效问题，就产生了数据库这种产品。<strong>数据库也是将数据持久化存储成多个文件，这些文件都是经过专门的设计的，底层有专门的数据结构来存储数据，所以我们直接打开数据库的数据文件是看不懂的，只有数据库软件可以读取。</strong></p><p><strong>数据库：高效存储和操作数据的仓库</strong></p><h2 id="MySQL相关的概念"><a href="#MySQL相关的概念" class="headerlink" title="MySQL相关的概念"></a>MySQL相关的概念</h2><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220330090451104.png" alt="image-20220330090451104"></p><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>关系型数据库就是由<strong>二维表</strong>及<strong>其之间的关系</strong>组成的一个数据组织。</p><h4 id="常见的关系型数据库"><a href="#常见的关系型数据库" class="headerlink" title="常见的关系型数据库"></a>常见的关系型数据库</h4><ul><li>Oracle- 甲骨文</li><li>DB2  - IBM</li><li>MySQL - 甲骨文</li><li>SQLServer - 微软</li><li>SQLite - 移动端</li></ul><h3 id="非关系型数据库-NoSQL"><a href="#非关系型数据库-NoSQL" class="headerlink" title="非关系型数据库  -NoSQL"></a>非关系型数据库  -NoSQL</h3><p>NoSQL &#x3D; Not Only SQL</p><p>不是二维表结构，表之间也没有关系,无模式</p><h4 id="常见的非关系型数据库"><a href="#常见的非关系型数据库" class="headerlink" title="常见的非关系型数据库"></a>常见的非关系型数据库</h4><ul><li>Redis  – kv格式的数据库</li><li>MongoDB – 文档型数据库 </li><li>HBase  – 列族式数据库</li></ul><h2 id="MySQL下载和安装"><a href="#MySQL下载和安装" class="headerlink" title="MySQL下载和安装"></a>MySQL下载和安装</h2><p>下载地址：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></p><p>配置MySQL环境变量</p><h2 id="MySQL客户端"><a href="#MySQL客户端" class="headerlink" title="MySQL客户端"></a>MySQL客户端</h2><ul><li><p><strong>DOS窗口 (需要使用命令)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NINGMEI&gt;mysql -hlocalhost -P3306 -uroot -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>如果连接数据库的时候使用的是<code>-hlocalhost -P3306</code>，那么-h和-P可以省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NINGMEI&gt;mysql -uroot -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 6</span><br></pre></td></tr></table></figure><p>以上的写法不安全，密码明文显示了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NINGMEI&gt;mysql -uroot -p</span><br><span class="line">Enter password: ******</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br></pre></td></tr></table></figure></li><li><p><strong>自带的workbench</strong></p></li><li><p><strong>第三方的客户端 （Navicat）</strong></p></li></ul><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>SQL：结构化查询语言（Structured Query Language）</p><p><strong>MySQL中SQL语句关键字推荐使用大写</strong></p><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ul><li>DDL语句 - 数据定义语言（data definition language）<ul><li>操作数据库相关对象（数据库、表、索引、视图等）</li><li>代表性的关键字：create、alter、drop</li></ul></li><li>DML语句 - 数据操作语言（Data Manipulation Language）<ul><li>对表中的数据进行增加、删除、修改</li><li>代表性的关键字：insert、delete、update</li></ul></li><li>DQL语句 - 数据查询语言（data query language）<ul><li>查询表中的数据</li><li>代表性的关键字：select</li></ul></li><li>TCL语句 - 事务控制语句（Transaction Control language）<ul><li>事务的操作</li></ul></li></ul><h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220330112554284.png" alt="image-20220330112554284"></p><p><strong>MySQL的数据类型就是字段的数据类型。</strong></p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li><p>整型（精确值）</p><table><thead><tr><th align="left">Type</th><th align="left">Storage (Bytes)</th><th align="left">Minimum Value Signed(有符号)</th><th align="left">Minimum Value Unsigned(无符号)</th><th align="left">Maximum Value Signed</th><th align="left">Maximum Value Unsigned</th></tr></thead><tbody><tr><td align="left"><code>TINYINT</code></td><td align="left">1</td><td align="left"><code>-128</code></td><td align="left"><code>0</code></td><td align="left"><code>127</code></td><td align="left"><code>255</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left">2</td><td align="left"><code>-32768</code></td><td align="left"><code>0</code></td><td align="left"><code>32767</code></td><td align="left"><code>65535</code></td></tr><tr><td align="left"><code>MEDIUMINT</code></td><td align="left">3</td><td align="left"><code>-8388608</code></td><td align="left"><code>0</code></td><td align="left"><code>8388607</code></td><td align="left"><code>16777215</code></td></tr><tr><td align="left"><code>INT</code></td><td align="left">4</td><td align="left"><code>-2147483648</code></td><td align="left"><code>0</code></td><td align="left"><code>2147483647</code></td><td align="left"><code>4294967295</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left">8</td><td align="left"><code>-2^63</code></td><td align="left"><code>0</code></td><td align="left"><code>2^63-1</code></td><td align="left"><code>2^64-1</code></td></tr></tbody></table></li><li><p>浮点型（近似值）</p><ul><li>float 单精度，占4个字节</li><li>double 双精度，占8个字节</li><li>float(d)、double(d) ,d从 0 到 23 的精度会产生一个 4 字节的单精度 列。从 24 到 53 的精度会产生一个 8 字节的双精度列。 </li><li>MySQL支持非标准的SQL: FLOAT(<em><code>M</code></em>,<em><code>D</code></em>),DOUBLE(<em><code>M</code></em>,<em><code>D</code></em>)<ul><li>M表示总的数字位数</li><li>D表示小数位数，如果小数未超出了D的范围，会四舍五入。但是四舍五入后整数必须满足M的范围，否则出错</li></ul></li></ul></li><li><p>定点型（精确值）</p><ul><li>DECIMAL(M,D)<ul><li>M表示总的数字位数</li><li>D表示小数位数</li><li>DECIMAL(M,0) 等价于DECIMAL(M)。就是个整数</li><li>DECIMAL的最大位数65位</li></ul></li></ul></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>定长字符串：char(n),n表示字符的数量<ul><li>例如， <code>CHAR(30)</code>最多可容纳 30 个字符</li><li>n的取值范围0-255个字符</li><li>定长指的是，插入的数据长度小于n,尾部会使用空格将长度填充到n</li><li>弊端：浪费空间；优点：效率高 （以空间换时间）</li></ul></li><li>可变字符串： varchar(n),n表示字符的数量<ul><li>例如， <code>VARCHAR(30)</code>最多可容纳 30 个字符</li><li>n的取值范围0-65535个字节**(受到行大小（65535字节）的限制)**</li><li>可变的意思是，varchar中的数据占据的真实数据的长度的空间，不足n也不会使用空间填充</li><li><code>VARCHAR</code>值存储为 1 字节或 2 字节长度前缀加上数据。长度前缀表示值中的字节数。如果值需要不超过 255 个字节，则一列使用一个长度字节，如果值可能需要超过 255 个字节，则使用两个长度字节。</li><li>优点：节约空间；弊端：效率低（以时间换空间）</li><li>varchar字符数&#x3D; （65535 - 每个字段占据的内存大小 - 2 字节长度前缀 - 1字节） &#x2F; 字符集中单个字符的最大长度</li></ul></li><li>文本类型 - Text<ul><li>Text类型的数据只有9-12个字节和其他的字段共享行大小（65535字节）</li><li>Text的数据部分是单独存储的，所以Text类型的数据大小不受到行大小（65535字节）的限制</li><li>Text不能使用索引</li></ul></li></ul><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><ul><li>date: 日期类型<ul><li>只有年月日</li><li>取值范围：<code>&#39;1000-01-01&#39;</code> to <code>&#39;9999-12-31&#39;</code>.</li></ul></li><li>time: 时间类型<ul><li>只有时分秒</li><li>取值范围：’-838:59:59’<code>to</code>‘838:59:59’</li><li>time不仅表示时间，还表示时间的间隔</li></ul></li><li>year: 年<ul><li>只有年份</li><li>四位的年份取值范围：’1901’<code>to</code>‘2155’</li></ul></li><li>datetime：日期时间类型<ul><li>有年月日时分秒</li><li>取值范围：<code>&#39;1000-01-01 00:00:00&#39;</code> to <code>&#39;9999-12-31 23:59:59&#39;</code>.</li><li>值不受时区的影响</li></ul></li><li>timestamp: 时间戳<ul><li>有年月日时分秒</li><li>取值范围：1970-01-01 00:00:01’<code>UTC to</code>‘2038-01-19 03:14:07’</li><li>值受时区的影响</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">create table if not exists db01.test(</span><br><span class="line">  name varchar(20),</span><br><span class="line">info text,</span><br><span class="line">time1 datetime,</span><br><span class="line">time2 timestamp</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 更改时区为西八区</span><br><span class="line">set time_zone=&quot;-08:00&quot;;</span><br><span class="line"></span><br><span class="line">select * from db01.test;</span><br></pre></td></tr></table></figure><h2 id="DDL语句※※"><a href="#DDL语句※※" class="headerlink" title="DDL语句※※"></a>DDL语句※※</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name</span><br><span class="line">    [create_option] ...</span><br><span class="line"></span><br><span class="line">create_option: [DEFAULT] &#123;</span><br><span class="line">    CHARACTER SET [=] charset_name</span><br><span class="line">  | COLLATE [=] collation_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">-- if not exists表示数据库不存在就创建，存在不做处理</span><br><span class="line">-- 默认的字符集是 latin1，所以需要指定字符集</span><br><span class="line">create database if not exists db01 character set utf8;</span><br></pre></td></tr></table></figure><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name]</span><br><span class="line">    alter_option ...</span><br><span class="line"></span><br><span class="line">alter_option: &#123;</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 切换(使用)数据库</span><br><span class="line">use db01;</span><br><span class="line"></span><br><span class="line">-- 修改数据库的字符集</span><br><span class="line">alter database db01 character set utf8;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据库</span><br><span class="line">drop database if exists db01;</span><br><span class="line">drop database if exists db02;</span><br></pre></td></tr></table></figure><h3 id="创建数据表-※※※"><a href="#创建数据表-※※※" class="headerlink" title="创建数据表 ※※※"></a>创建数据表 ※※※</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line"></span><br><span class="line">CREATE TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    [(create_definition,...)]</span><br><span class="line">    [table_options]</span><br><span class="line">    [AS] query_expression</span><br><span class="line"></span><br><span class="line">CREATE TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;</span><br><span class="line"></span><br><span class="line">create_definition: &#123;</span><br><span class="line">    col_name column_definition  //字段信息</span><br><span class="line">    // </span><br><span class="line">  | &#123;INDEX | KEY&#125; [index_name] [index_type] (key_part,...) （索引）</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [CONSTRAINT [symbol]] PRIMARY KEY(主键)</span><br><span class="line">      [index_type] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [CONSTRAINT [symbol]] UNIQUE（唯一） [INDEX | KEY]</span><br><span class="line">      [index_name] [index_type] (key_part,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [CONSTRAINT [symbol]] FOREIGN KEY （外健）</span><br><span class="line">      [index_name] (col_name,...)</span><br><span class="line">      reference_definition</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">column_definition: &#123;</span><br><span class="line">    data_type [NOT NULL | NULL] [DEFAULT default_value]</span><br><span class="line">      [AUTO_INCREMENT]（自增） [UNIQUE [KEY]] [[PRIMARY] KEY]</span><br><span class="line">      [COMMENT &#x27;string&#x27;]（注解）</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reference_definition:</span><br><span class="line">    REFERENCES tbl_name (key_part,...)</span><br><span class="line">      [ON DELETE reference_option]</span><br><span class="line">      [ON UPDATE reference_option]</span><br><span class="line"></span><br><span class="line">reference_option:</span><br><span class="line">    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT</span><br><span class="line"></span><br><span class="line">table_options:</span><br><span class="line">    table_option [[,] table_option] ...</span><br><span class="line"></span><br><span class="line">table_option: &#123;</span><br><span class="line">    AUTO_INCREMENT [=] value 设置自增初始值</span><br><span class="line">  | [DEFAULT] CHARACTER SET [=] charset_name 设置表的字符集</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name </span><br><span class="line">  | COMMENT [=] &#x27;string&#x27; 表的备注</span><br><span class="line">  | ENGINE [=] engine_name  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query_expression:</span><br><span class="line">    SELECT ...   (Some valid select or union statement)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 创建学生表</span><br><span class="line">create table if not exists db01.student(</span><br><span class="line">  -- 数据库中除了数字外，其余类型的值都是用单引号或双引号引起来</span><br><span class="line">  uid int comment &quot;学号&quot;,</span><br><span class="line">`name` char(4)  comment &quot;姓名&quot;,</span><br><span class="line">-- unsigned 表示无符号</span><br><span class="line">age tinyint unsigned comment &quot;年龄&quot;,</span><br><span class="line">-- 最后一个字段没有逗号</span><br><span class="line">sex char(2) comment &quot;性别&quot;</span><br><span class="line">)comment=&quot;学生表&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查看建库语句</span><br><span class="line">show create database db01;</span><br><span class="line"></span><br><span class="line">-- 查看建表语句</span><br><span class="line">show create table db01.student;</span><br></pre></td></tr></table></figure><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name</span><br><span class="line">    [alter_option [, alter_option] ...]</span><br><span class="line"></span><br><span class="line">alter_option: &#123;</span><br><span class="line">    table_options</span><br><span class="line">  | ADD [COLUMN] col_name column_definition ————————— 添加字段</span><br><span class="line">        [FIRST | AFTER col_name]   —————————————————— （字段添加位置）</span><br><span class="line">  | ADD [COLUMN] (col_name column_definition,...)</span><br><span class="line">  | ADD &#123;INDEX | KEY&#125; [index_name]  ————————————————— 添加索引</span><br><span class="line">        [index_type] (key_part,...) [index_option] ...</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] PRIMARY KEY    ———————— 添加主键</span><br><span class="line">        [index_type] (key_part,...) </span><br><span class="line">  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]————添加唯一</span><br><span class="line">        [index_name] [index_type] (key_part,...)</span><br><span class="line">        [index_option] ...</span><br><span class="line">  | ADD [CONSTRAINT [symbol]] FOREIGN KEY  —————————— 添加外键</span><br><span class="line">        [index_name] (col_name,...)</span><br><span class="line">        reference_definition</span><br><span class="line">  | ALTER [COLUMN] col_name &#123;    设置默认值</span><br><span class="line">        SET DEFAULT &#123;literal | (expr)&#125;</span><br><span class="line">      | DROP DEFAULT</span><br><span class="line">    &#125;</span><br><span class="line">  | CHANGE [COLUMN] old_col_name new_col_name column_definition</span><br><span class="line">        [FIRST | AFTER col_name]</span><br><span class="line">  | DROP [COLUMN] col_name</span><br><span class="line">  | DROP &#123;INDEX | KEY&#125; index_name</span><br><span class="line">  | DROP PRIMARY KEY</span><br><span class="line">  | DROP FOREIGN KEY fk_symbol</span><br><span class="line">  | MODIFY [COLUMN] col_name column_definition</span><br><span class="line">        [FIRST | AFTER col_name]</span><br><span class="line">  | RENAME &#123;INDEX | KEY&#125; old_index_name TO new_index_name</span><br><span class="line">  | RENAME [TO | AS] new_tbl_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table_options:</span><br><span class="line">    table_option [[,] table_option] ...</span><br><span class="line">    </span><br><span class="line">// 修改的字段后可添加的内容</span><br><span class="line">table_option: &#123;</span><br><span class="line">    AUTO_INCREMENT [=] value</span><br><span class="line">  | [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br><span class="line">  | COMMENT [=] &#x27;string&#x27;</span><br><span class="line">  | ENGINE [=] engine_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 在student表中添加address字段</span><br><span class="line">alter table db01.student add address varchar(20) not null;</span><br><span class="line"></span><br><span class="line">-- 在student表中添加score字段在sex字段之后</span><br><span class="line">alter table db01.student add score int after sex;</span><br><span class="line"></span><br><span class="line">-- 将student表中的uid字段设置成主键</span><br><span class="line">alter table db01.student add primary key(uid);</span><br><span class="line"></span><br><span class="line">-- 将student表中的sex字段改成gender</span><br><span class="line">-- change 主要用于修改字段的名称</span><br><span class="line">alter table db01.student change sex gender char(2);</span><br><span class="line"></span><br><span class="line">-- 将student表中的uid主键设置成自增</span><br><span class="line">alter table db01.student change uid uid int auto_increment;</span><br><span class="line"></span><br><span class="line">-- 将student表中的gender修改成varchar(3)</span><br><span class="line">-- modify更改字段的其他信息，除了名字</span><br><span class="line">alter table db01.student modify gender varchar(3);</span><br><span class="line"></span><br><span class="line">-- 删除student表中的address</span><br><span class="line">alter table db01.student drop address;</span><br><span class="line"></span><br><span class="line">-- 删除student表中的name字段的unique索引</span><br><span class="line">alter table db01.student drop index name_key;</span><br><span class="line"></span><br><span class="line">-- 删除student表中的主键</span><br><span class="line">-- 删除主键之前需要先取消自增</span><br><span class="line">-- 先取消自增</span><br><span class="line">alter table db01.student modify uid int;</span><br><span class="line">-- 删除主键</span><br><span class="line">alter table db01.student drop primary key;</span><br><span class="line"></span><br><span class="line">-- 将student表名修改成t_student</span><br><span class="line">alter table db01.student rename to t_student;</span><br></pre></td></tr></table></figure><h3 id="RENAME-TABLE-语句"><a href="#RENAME-TABLE-语句" class="headerlink" title="RENAME TABLE 语句"></a>RENAME TABLE 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE</span><br><span class="line">    tbl_name TO new_tbl_name</span><br><span class="line">    [, tbl_name2 TO new_tbl_name2] </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 将t_student表名修改成student</span><br><span class="line">rename table t_student to student;</span><br></pre></td></tr></table></figure><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS]</span><br><span class="line">    tbl_name [, tbl_name] ...</span><br><span class="line">    [RESTRICT | CASCADE]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">drop table if exists student,student01,student02,student03;</span><br></pre></td></tr></table></figure><h3 id="TRUNCATE-TABLE-语句"><a href="#TRUNCATE-TABLE-语句" class="headerlink" title="TRUNCATE TABLE 语句"></a>TRUNCATE TABLE 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- truncate清空数据</span><br><span class="line">-- 1.先将数据表删除</span><br><span class="line">-- 2.创建一张空表</span><br><span class="line">truncate table student04;</span><br></pre></td></tr></table></figure><h2 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h2><p>字段约束的作用就是对字段的值进行限制，保证数据的安全性和完整性。</p><h3 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束-primary key"></a>主键约束-primary key</h3><ul><li>一张表只能有一个主键</li><li>主键唯一且非空的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表01</span><br><span class="line">create table if not exists db01.student01(</span><br><span class="line">  -- uid设置成主键</span><br><span class="line">  uid int primary key,</span><br><span class="line">name char(10),</span><br><span class="line">age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上的方式只能将一个字段设置成主键。开发中有时候我们需要将多个字段组合成一个主键,这种主键叫做复合主键。</p><p>复合主键需要使用以下的方式设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表02</span><br><span class="line">create table if not exists db01.student02(</span><br><span class="line">  uid int,</span><br><span class="line">name char(10),</span><br><span class="line">age int,</span><br><span class="line">-- 复合主键，主键只有一个，只是这个主键是由两个字段组成的</span><br><span class="line">primary key(uid,name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>如果主键字段的数据类型是数字类型，可以使用自动增长（auto_increment）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表03</span><br><span class="line">create table if not exists db01.student03(</span><br><span class="line">  -- 设置主键并自增,自增初始化是1</span><br><span class="line">  uid int primary key auto_increment,</span><br><span class="line">name char(10),</span><br><span class="line">age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建学生表04</span><br><span class="line">create table if not exists db01.student04(</span><br><span class="line">  -- 设置主键并自增</span><br><span class="line">  uid int primary key auto_increment,</span><br><span class="line">name char(10),</span><br><span class="line">age int</span><br><span class="line">-- 更改自增的初始值为1000</span><br><span class="line">)auto_increment=1000;</span><br></pre></td></tr></table></figure><p><strong>在开发中推荐使用一个跟业务无关的字段作为主键。</strong></p><h3 id="唯一性约束-unique"><a href="#唯一性约束-unique" class="headerlink" title="唯一性约束 - unique"></a>唯一性约束 - unique</h3><ul><li>字段的值不能有重复的</li><li>允许为null，且null值不受唯一性约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表05</span><br><span class="line">create table if not exists db01.student05(</span><br><span class="line">    -- 设置主键并自增</span><br><span class="line">    uid int primary key auto_increment,</span><br><span class="line">-- name必须唯一</span><br><span class="line">name char(10) unique,</span><br><span class="line">age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="非空约束-Not-Null"><a href="#非空约束-Not-Null" class="headerlink" title="非空约束 - Not Null"></a>非空约束 - Not Null</h3><ul><li>值不能为null</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表06</span><br><span class="line">create table if not exists db01.student06(</span><br><span class="line">  -- 设置主键并自增</span><br><span class="line">  uid int primary key auto_increment,</span><br><span class="line">-- name必须唯一且不能为null</span><br><span class="line">name char(10) unique not null,</span><br><span class="line">age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看表的信息</span><br><span class="line">mysql&gt; desc student06;</span><br><span class="line">+-------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+-------+----------+------+-----+---------+----------------+</span><br><span class="line">| uid   | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | char(10) | NO   | UNI | NULL    |                |</span><br><span class="line">| age   | int(11)  | YES  |     | NULL    |                |</span><br><span class="line">+-------+----------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p><strong>unique not null 和primary key的区别</strong>：</p><ul><li>primary key 一张表只能有一个</li><li>unique一张表可以有多个</li></ul><h3 id="默认值约束-default"><a href="#默认值约束-default" class="headerlink" title="默认值约束 - default"></a>默认值约束 - default</h3><ul><li>可以给字段设置默认值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表08</span><br><span class="line">create table if not exists db01.student08(</span><br><span class="line">  uid int,</span><br><span class="line">-- name必须唯一且不能为null</span><br><span class="line">name char(10) unique not null default &quot;&quot;,</span><br><span class="line">age int,</span><br><span class="line">-- 设置字段的默认值</span><br><span class="line">sex char(6) default &#x27;male&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束-后面讲"><a href="#外键约束-后面讲" class="headerlink" title="外键约束 - 后面讲"></a>外键约束 - 后面讲</h3><h2 id="显示宽度"><a href="#显示宽度" class="headerlink" title="显示宽度"></a>显示宽度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists db01.student09(</span><br><span class="line">  -- 3表示的是显示宽度，需要配合零填充才有效果</span><br><span class="line">  -- 数据不足三位的时候使用零填充会在前面补0</span><br><span class="line">  uid int(3) zerofill,</span><br><span class="line">name char(10) unique not null default &quot;&quot;,</span><br><span class="line">age int,</span><br><span class="line">sex char(6) default &#x27;male&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="DML语句※※"><a href="#DML语句※※" class="headerlink" title="DML语句※※"></a>DML语句※※</h2><blockquote><p>DML语句操作的数据表中的数据</p></blockquote><h3 id="插入语句-insert"><a href="#插入语句-insert" class="headerlink" title="插入语句-insert"></a>插入语句-insert</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] tbl_name</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT [INTO] tbl_name</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    SELECT ...</span><br><span class="line"></span><br><span class="line">value_list:</span><br><span class="line">    value [, value] ...</span><br><span class="line">    </span><br><span class="line">value:</span><br><span class="line">    &#123;expr | DEFAULT&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表</span><br><span class="line">create table if not exists student (</span><br><span class="line">  _id bigint primary key auto_increment,</span><br><span class="line">sid int unsigned not null unique,</span><br><span class="line">name varchar(12) not null,</span><br><span class="line">gender char(6) default &#x27;male&#x27;,</span><br><span class="line">province text,</span><br><span class="line">create_time datetime,</span><br><span class="line">update_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 插入一条数据</span><br><span class="line">insert into student (_id,sid,name,gender,province,create_time,update_time)</span><br><span class="line">values (1,1001,&#x27;zhangsan&#x27;,&#x27;male&#x27;,&#x27;四川省&#x27;,&#x27;2022-03-30 17:22:10&#x27;,&#x27;2022-03-30 17:22:10&#x27;);</span><br><span class="line"></span><br><span class="line">-- 插入多条数据</span><br><span class="line">insert into student (_id,sid,name,gender,province,create_time,update_time)</span><br><span class="line">values (2,1002,&#x27;lisi&#x27;,&#x27;male&#x27;,&#x27;四川省&#x27;,&#x27;2022-03-30 17:25:10&#x27;,&#x27;2022-03-30 17:25:10&#x27;),</span><br><span class="line">(3,1003,&#x27;hanmeimei&#x27;,&#x27;male&#x27;,&#x27;重庆市&#x27;,&#x27;2022-03-30 17:25:10&#x27;,&#x27;2022-03-30 17:25:10&#x27;);</span><br><span class="line"></span><br><span class="line">-- 插入数据的时候，如果是插入全部字段的数据，字段可以不写</span><br><span class="line">insert into student </span><br><span class="line">values (4,1004,&#x27;zhaosi&#x27;,&#x27;male&#x27;,&#x27;四川省&#x27;,&#x27;2022-03-30 17:25:10&#x27;,&#x27;2022-03-30 17:25:10&#x27;),</span><br><span class="line">(5,1005,&#x27;liuneng&#x27;,&#x27;male&#x27;,&#x27;重庆市&#x27;,&#x27;2022-03-30 17:25:10&#x27;,&#x27;2022-03-30 17:25:10&#x27;);</span><br><span class="line"></span><br><span class="line">-- 插入部分字段的数据，字段不可以省略</span><br><span class="line">-- 非空字段必须插入值，除非有默认值</span><br><span class="line">insert into student (sid,name) values (1006,&#x27;test&#x27;);</span><br><span class="line">-- 有默认值的字段，插入数据的时候可以使用default表示默认值</span><br><span class="line">insert into student (sid,name,gender) values (1007,&#x27;test01&#x27;,default);</span><br><span class="line">-- 插入数据的时候，自增的主键可以使用0或null</span><br><span class="line">insert into student (_id,sid,name) values (0,1008,&#x27;test02&#x27;);</span><br><span class="line">insert into student (_id,sid,name) values (null,1009,&#x27;test03&#x27;);</span><br></pre></td></tr></table></figure><h3 id="更新语句-update"><a href="#更新语句-update" class="headerlink" title="更新语句-update"></a>更新语句-update</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tableName</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [LIMIT row_count]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">assignment_list:</span><br><span class="line">    assignment [, assignment] ...</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">assignment:</span><br><span class="line">    col_name = value</span><br><span class="line">    </span><br><span class="line">value:</span><br><span class="line">    &#123;expr | DEFAULT&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 将student表中的性别修改成female</span><br><span class="line">## 修改所有行的数据</span><br><span class="line">update student set gender = &#x27;female&#x27;;</span><br><span class="line"></span><br><span class="line">## 修改前三行的数据</span><br><span class="line">update student set gender = &#x27;male&#x27; limit 3;</span><br><span class="line"></span><br><span class="line">## 将student中sid为1006的gender修改成male</span><br><span class="line">## where子句进行条件过滤</span><br><span class="line">update student set gender = &#x27;male&#x27; where sid = 1006;</span><br><span class="line"></span><br><span class="line">## 有默认值的字段赋值的时候可以使用default</span><br><span class="line">update student set gender = default where sid = 1008;</span><br></pre></td></tr></table></figure><h3 id="删除语句-delete"><a href="#删除语句-delete" class="headerlink" title="删除语句-delete"></a>删除语句-delete</h3><p><strong>单表语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tbl_name</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [LIMIT row_count]</span><br></pre></td></tr></table></figure><p><strong>多表语句：– 了解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE tbl_name[.*] [, tbl_name[.*]] ...</span><br><span class="line">    FROM table_references</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line"></span><br><span class="line">DELETE FROM tbl_name[.*] [, tbl_name[.*]] ...</span><br><span class="line">     USING table_references</span><br><span class="line">    [WHERE where_condition]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 删除student表的所有数据，属于DML</span><br><span class="line">-- 自增的主键会继续递增</span><br><span class="line">-- 逐行删除</span><br><span class="line">delete from student;</span><br><span class="line"></span><br><span class="line">-- 删除表再新建一张空表，属于DDL</span><br><span class="line">-- 自增的主键还原成初始值</span><br><span class="line">truncate table student;</span><br><span class="line"></span><br><span class="line">-- 使用where过滤指定的数据</span><br><span class="line">delete from student where sid = 1009;</span><br><span class="line"></span><br><span class="line">-- 删除student表的所有数据</span><br><span class="line">delete student.*</span><br><span class="line">    from student;</span><br><span class="line"></span><br><span class="line">-- 删除多张表</span><br><span class="line">-- 92语法： using后面多张表使用逗号</span><br><span class="line">delete from db01.student,db01.student01 using student,student01;</span><br></pre></td></tr></table></figure><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><ul><li><p>一对一： 一张表中的一行数据只会对应另外一张表的一行数据</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401095533764.png" alt="image-20220401095533764"></p></li><li><p>一对多&#x2F;多对一：一张表中一行数据对应另外一张表中的多行数据</p><ul><li><p>比如班级和学生、员工和部门</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401100428723.png" alt="image-20220401100428723"></p><p>以上设计的表有问题：</p><ol><li>部门数据冗余的，浪费空间</li><li>如果现在部门名称发生变更，那么以上表中的数据就要将该部门的所有员工数据进行更新，效率也不高</li></ol><p>所以我们需要将以上的表进行拆分，以上的表是一对多&#x2F;多对一的关系，所以我们拆成两张表：</p><p><strong>拆分规则：</strong></p><ol><li>将一的方拆成一张表（部门表）</li><li>将多的一方也拆成一张表（员工表）</li><li>多的一方添加外键，引用少的一方的主键字段</li></ol><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401101117777-16487790832141.png" alt="image-20220401101117777"></p></li></ul></li><li><p>多对多：表1中一行数据对应表2中的多行数据，表2中一行数据对应表1中的多行数据</p><ul><li><p>学生和老师或者学生和科目</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401101951654.png" alt="image-20220401101951654"></p></li></ul></li></ul><p>以上设计的表，数据冗余了。所以需要拆表。以上表的关系是多对多的关系，所以<strong>拆分规则如下：</strong></p><p><strong>拆分规则：</strong></p><ol><li>将两边多的一方都拆成一张独立表（就有两张表了）</li><li>创建一张中间关系表，关系表中使用以上两张表的主键作为外键字段</li></ol><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401102727436.png" alt="image-20220401102727436"></p><h2 id="外键约束-foreign-key"><a href="#外键约束-foreign-key" class="headerlink" title="外键约束 - foreign key"></a>外键约束 - foreign key</h2><p>外键：就是外部的键。也就是该字段的内容来自其他表。</p><h3 id="外键的作用"><a href="#外键的作用" class="headerlink" title="外键的作用"></a>外键的作用</h3><p>保证数据的一致性和完整性、安全性。有了外键约束后字段的数据就不能乱写了。</p><h3 id="一对多的外键约束"><a href="#一对多的外键约束" class="headerlink" title="一对多的外键约束"></a>一对多的外键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 创建部门表</span><br><span class="line">create table dept(</span><br><span class="line">  did int primary key,</span><br><span class="line">name char(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建员表</span><br><span class="line">create table emp(</span><br><span class="line"> eid int primary key,</span><br><span class="line"> name char(10),</span><br><span class="line"> age tinyint,</span><br><span class="line"> sex char(6),</span><br><span class="line"> did int,</span><br><span class="line"> -- 约束     约束名（可省）      外键     外键字段  引用  表   引用字段</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> constraint fk_emp_dept_did foreign key (did) references dept(did)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401110006844.png" alt="image-20220401110006844"></p><p><strong>父表：被外键引用的表叫做父表。</strong>（上面的部门表就是父表）</p><p><strong>子表：有外键的表。</strong>（上面的员工表就是子表）</p><h3 id="多对多关键的外键创建"><a href="#多对多关键的外键创建" class="headerlink" title="多对多关键的外键创建"></a>多对多关键的外键创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表</span><br><span class="line">create table t_stu(</span><br><span class="line">  sid int primary key,</span><br><span class="line">name char(10),</span><br><span class="line">age int,</span><br><span class="line">sex char(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建学科表</span><br><span class="line">create table t_subject(</span><br><span class="line"> sub_id int primary key,</span><br><span class="line"> sname char(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建学生和学科的关系表</span><br><span class="line">create table t_stu_sub_rel(</span><br><span class="line"> _id int primary key,</span><br><span class="line"> sid int,</span><br><span class="line"> sub_id int,</span><br><span class="line"> foreign key (sid) references t_stu(sid),</span><br><span class="line"> foreign key (sub_id) references t_subject(sub_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键的注意事项"><a href="#外键的注意事项" class="headerlink" title="外键的注意事项"></a>外键的注意事项</h3><ul><li>外键引用表中的引用字段必须具备<strong>唯一性</strong></li><li>外键字段和引用字段的<strong>数据类型要一致</strong>，数值类型<strong>长度和符号</strong>要一致。<strong>字符串类型长度可以不一样</strong></li><li>建议：外键字段和引用字段的数据类型一致，长度也一致</li><li>删除表，需要<strong>先删除子表，再删除父表</strong></li><li>父子表必须使用相同的存储引擎，不能定义为临时表。</li></ul><h2 id="DQL语句-※-※-※-※-※"><a href="#DQL语句-※-※-※-※-※" class="headerlink" title="DQL语句 ※ ※ ※ ※ ※"></a>DQL语句 ※ ※ ※ ※ ※</h2><p>DML语句操作会修改原始数据；返回的是多少行受影响。</p><p>DQL语句不会修改原始数据；返回的是查询到的结果集，是一张虚拟表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    [ALL | DISTINCT ]</span><br><span class="line">    select_expr [, select_expr] ...</span><br><span class="line">    [FROM table_references]</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [GROUP BY &#123;col_name&#125;</span><br><span class="line">    [HAVING where_condition]</span><br><span class="line">    [ORDER BY &#123;col_name&#125;</span><br><span class="line">      [ASC | DESC], ...]</span><br><span class="line">    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br><span class="line">    [FOR UPDATE]</span><br></pre></td></tr></table></figure><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 查询student表的所有数据</span><br><span class="line">-- select 返回的是虚拟表，数据在内存中</span><br><span class="line">-- select 后面跟的字段叫做投影(project)字段</span><br><span class="line">-- 投影字段：也就是虚拟表中需要显示的字段</span><br><span class="line">-- * 表示所有的字段，也就是投影所有的字段</span><br><span class="line">select * from student;</span><br><span class="line">-- 下面的语句表示只投影nane和gender</span><br><span class="line">-- 虽然只投影了nane和gender，但是其他的所有字段也在内存中</span><br><span class="line">select name,gender from student;</span><br><span class="line"></span><br><span class="line">-- 查找性别是male的学生的名字和性别</span><br><span class="line">select name,gender from student where gender =&#x27;male&#x27;;</span><br><span class="line"></span><br><span class="line">-- select语句不会修改原始数据</span><br><span class="line">select sid+1000,name,gender from student;</span><br></pre></td></tr></table></figure><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220401114338165.png" alt="image-20220401114338165"></p><h2 id="单行函数和操作符"><a href="#单行函数和操作符" class="headerlink" title="单行函数和操作符"></a>单行函数和操作符</h2><h3 id="比较函数和操作符"><a href="#比较函数和操作符" class="headerlink" title="比较函数和操作符"></a>比较函数和操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于运算符</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于或等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than"><code>&lt;</code></a></td><td align="left">小于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-equal"><code>&lt;&gt;</code>,<code>!=</code></a></td><td align="left">不等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than-or-equal"><code>&lt;=</code></a></td><td align="left">小于或等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal-to"><code>&lt;=&gt;</code></a></td><td align="left">NULL 安全等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal"><code>=</code></a></td><td align="left">等号运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_between"><code>BETWEEN ... AND ...</code></a></td><td align="left">一个值是否在一个值范围内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_in"><code>IN()</code></a></td><td align="left">一个值是否在一组值内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-not-null"><code>IS NOT NULL</code></a></td><td align="left">NOT NULL 值测试</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-null"><code>IS NULL</code></a></td><td align="left">空值测试</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#function_isnull"><code>ISNULL()</code></a></td><td align="left">测试参数是否为 NULL</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_like"><code>LIKE</code></a></td><td align="left">简单的模式匹配</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-between"><code>NOT BETWEEN ... AND ...</code></a></td><td align="left">值是否不在值范围内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-in"><code>NOT IN()</code></a></td><td align="left">一个值是否不在一组值内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_not-like"><code>NOT LIKE</code></a></td><td align="left">简单模式匹配的否定</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#function_strcmp"><code>STRCMP()</code></a></td><td align="left">比较两个字符串</td></tr></tbody></table><p>在MySQL中可以使用<code>&lt;&gt;</code>和<code>!=</code>表示不等于。但是!&#x3D;是编程语言中使用的，MySQL兼容了。真正MySQL的不等于是&lt;&gt;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询表示四川省的学生信息</span><br><span class="line">select * from student where province != &quot;四川省&quot;;</span><br><span class="line">select * from student where province &lt;&gt; &quot;四川省&quot;;</span><br></pre></td></tr></table></figure><p>&lt;&#x3D;&gt;null安全等于操作符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询省份是null的学生信息</span><br><span class="line">-- 判断null不能使用=</span><br><span class="line">-- &lt;=&gt;是MySQL的SQL方言</span><br><span class="line">select * from student where province &lt;=&gt; null;</span><br><span class="line"></span><br><span class="line">-- 查询省份是null的学生信息</span><br><span class="line">select * from student where province is null;</span><br><span class="line"></span><br><span class="line">-- 查询省份不是null的学生信息</span><br><span class="line">select * from student where province is not null;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于等于22小于等于25的学生信息</span><br><span class="line">-- between 22 and 25 : 于等于22小于等于25</span><br><span class="line">select * from student where age between 22 and 25;</span><br><span class="line"></span><br><span class="line">-- 查询年龄是21，23，25的学生信息</span><br><span class="line">-- age in(21,23,25) 表示age是否等于()中的任何一个值</span><br><span class="line">select * from student where age in(21,23,25);</span><br><span class="line"></span><br><span class="line">-- where后面的表达式结果是boolean</span><br><span class="line">-- 查询age是null的信息</span><br><span class="line">select * from student where isnull(age);</span><br><span class="line"></span><br><span class="line">-- 查询姓张的学生</span><br><span class="line">-- like 模糊查询</span><br><span class="line">-- %表示0到多个字符</span><br><span class="line">-- _表示1个字符</span><br><span class="line">select * from student where name like &#x27;张%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字是张x的学生</span><br><span class="line">select * from student where name like &#x27;张_&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中包含张的学生信息</span><br><span class="line">-- 注意：%或者_在最前面，索引就会失效</span><br><span class="line">select * from student where name like &#x27;%张%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名以%开头的student</span><br><span class="line">-- \ 转义</span><br><span class="line">select * from student where name like &#x27;\%%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 默认的转义字符是\ </span><br><span class="line">-- escape &#x27;#&#x27; 表示#是转义字符</span><br><span class="line">select * from student where name like &#x27;#%%&#x27; escape &#x27;#&#x27;;</span><br><span class="line"></span><br><span class="line">-- 比较两个字符串</span><br><span class="line">-- 0 表示相等</span><br><span class="line">-- -1 表示小于</span><br><span class="line">-- 1 表示大于</span><br><span class="line">select strcmp(&quot;java&quot;,&quot;java&quot;); -- 0</span><br><span class="line">select strcmp(&quot;hello&quot;,&quot;java&quot;); -- -1</span><br><span class="line">select strcmp(&quot;zero&quot;,&quot;hello&quot;); -- 1</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_and"><code>AND</code>,<code>&amp;&amp;</code></a></td><td align="left">逻辑与</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_not"><code>NOT</code>,<code>!</code></a></td><td align="left">否定价值</td></tr><tr><td align="left">[<code>OR</code>,&#96;</td><td align="left"></td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_xor"><code>XOR</code></a></td><td align="left">逻辑异或</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于等于22小于等于25的学生信息</span><br><span class="line">select * from student where age &gt;= 22 and age &lt;= 25;</span><br><span class="line">select * from student where age &gt;= 22 &amp;&amp; age &lt;= 25;</span><br><span class="line"></span><br><span class="line">-- 查询年龄等于22或者等于25的学生信息</span><br><span class="line">select * from student where age = 22 or age = 25;</span><br><span class="line">select * from student where age = 22 || age = 25;</span><br><span class="line"></span><br><span class="line">-- 查询姓名不姓张的学生信息</span><br><span class="line">select * from student where name not like &#x27;张%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询四川或重庆的女生</span><br><span class="line">-- and和or同时存在，and的优先级高</span><br><span class="line">select * from student where (province = &#x27;四川省&#x27; or province = &#x27;重庆市&#x27;) and gender = &#x27;female&#x27;;</span><br></pre></td></tr></table></figure><p><strong>XOR逻辑异或</strong>：如果任意一个操作数为NULL，则返回NULL。非空的操作数，相同为假，不同为真</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT 1 XOR 1;</span><br><span class="line">        -&gt; 0</span><br><span class="line">mysql&gt; SELECT 1 XOR 0;</span><br><span class="line">        -&gt; 1</span><br><span class="line">mysql&gt; SELECT 1 XOR NULL;</span><br><span class="line">        -&gt; NULL</span><br><span class="line">mysql&gt; SELECT 1 XOR 1 XOR 1;</span><br><span class="line">        -&gt; 1</span><br><span class="line">        </span><br><span class="line">-- 逻辑运算符连接的是boolean值</span><br><span class="line">-- 非0 都表示真</span><br><span class="line">SELECT 2 XOR 1 XOR 1; -- 1</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html#operator_assign-value"><code>:=</code></a></td><td align="left">赋值</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html#operator_assign-equal"><code>=</code></a></td><td align="left">赋值（作为 <a href="https://dev.mysql.com/doc/refman/5.7/en/set-variable.html"><code>SET</code></a> 语句的一部分，或作为UPDATE语句中<code>SET</code>子句的 一部分）</td></tr></tbody></table><p>&#x3D;号可以用作比较运算符，还可以作为赋值运算符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 赋值运算符</span><br><span class="line">set time_zone = &quot;-08:00&quot;;</span><br><span class="line">update student set name = &quot;不知道&quot;;</span><br><span class="line"></span><br><span class="line">-- 与=不同，:= 运算符永远不会被解释为比较运算符</span><br><span class="line">set time_zone := &quot;+08:00&quot;;</span><br></pre></td></tr></table></figure><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%</code>,<code>MOD</code></td><td align="left">模运算符</td></tr><tr><td align="left"><code>*</code></td><td align="left">乘法运算符</td></tr><tr><td align="left"><code>+</code></td><td align="left">加法运算符</td></tr><tr><td align="left"><code>-</code></td><td align="left">减号运算符</td></tr><tr><td align="left"><code>-</code></td><td align="left">更改参数的符号</td></tr><tr><td align="left"><code>/</code></td><td align="left">除法运算符</td></tr><tr><td align="left"><code>DIV</code></td><td align="left">整数除法</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- mysql中+用于数字计算，不能用于字符串拼接</span><br><span class="line">-- 字符串做运算，会将字符串转成数字相加</span><br><span class="line">-- 字符串不是数值类型，就不能转具体的数字，就会转成0</span><br><span class="line">-- true表示1，false表示0</span><br><span class="line">-- null和任何数做运算都是null</span><br><span class="line">select &quot;1&quot;+&quot;2&quot;; -- 3</span><br><span class="line">select &quot;1&quot; + 2; -- 3</span><br><span class="line">select &quot;a&quot; + 2; -- 2</span><br><span class="line">select &quot;a&quot; + &quot;b&quot;; -- 0</span><br><span class="line">select true + 2; -- 3</span><br><span class="line">select false + 2; -- 2</span><br><span class="line">select &quot;a&quot; + true; -- 1</span><br><span class="line">select null + 2; -- null</span><br><span class="line">select null + &quot;a&quot;; -- null</span><br><span class="line"></span><br><span class="line">-- mysql中除数是0，结果为null</span><br><span class="line">select 1 / 0; -- null</span><br><span class="line">select -6 / 3; -- -2.0000</span><br><span class="line">select -5 / 2; -- -2.5000</span><br><span class="line">select -5 / -2; -- 2.5000</span><br><span class="line"></span><br><span class="line">-- div 表示整除，也就是取结果的整数部分</span><br><span class="line">select -6 div 3; -- -2</span><br><span class="line">select -5 div 2; -- -2</span><br><span class="line">select -5 div -2; -- 2</span><br><span class="line"></span><br><span class="line">-- %结果的符号取决于被除数的符号</span><br><span class="line">select 1 % 0; -- null</span><br><span class="line">select 5 % 2; -- 1</span><br><span class="line">select -5 % 2; -- -1</span><br><span class="line">select -5 % -2; -- -1</span><br><span class="line">select 5 % -2; -- 1</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ul><li>abs(): 绝对值函数</li><li>ceil():向上取整</li><li>floor():向下取整</li><li>round():四舍五入</li><li>power(): 指数函数</li><li>pi():圆周率函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select abs(-110); -- 110</span><br><span class="line">select ceil(-3.11); -- -3</span><br><span class="line">select floor(-3.11); -- -4</span><br><span class="line">-- 绝对值的四舍五入加负号</span><br><span class="line">select round(-3.11); -- -3</span><br><span class="line">select round(-3.45); -- -3</span><br><span class="line">select round(-3.5); -- -4</span><br><span class="line"></span><br><span class="line">select power(2,3); -- 8</span><br><span class="line"></span><br><span class="line">select pi(); -- 3.141593</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><ul><li><p>case语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 类似于java中的switch</span><br><span class="line">CASE value WHEN compare_value THEN result [WHEN compare_value THEN result ...] [ELSE result] END</span><br><span class="line"></span><br><span class="line">--  类似于java中的 if...else if</span><br><span class="line">CASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE result] END</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 查询学生的信息，如果是male返回帅哥，如果是female就返回美女</span><br><span class="line">select name,gender,</span><br><span class="line">    case gender</span><br><span class="line">  when &quot;male&quot; then &quot;帅哥&quot;</span><br><span class="line">when &quot;female&quot; then &quot;美女&quot;</span><br><span class="line">else &quot;人渣&quot;</span><br><span class="line">end as info</span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询学生的信息，如果是male返回帅哥，如果是female就返回美女</span><br><span class="line">select name,gender,</span><br><span class="line">   case </span><br><span class="line"> when gender = &quot;male&quot; then &quot;帅哥&quot;</span><br><span class="line"> when gender = &quot;female&quot; then &quot;美女&quot;</span><br><span class="line"> else &quot;人渣&quot;</span><br><span class="line"> end as info</span><br><span class="line"> from student;</span><br></pre></td></tr></table></figure></li><li><p>if语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 类似于三目运算符</span><br><span class="line">-- 如果expr1是TRUE (expr1 &lt;&gt; 0和expr1 IS NOT NULL)，则IF() 返回expr2。否则，它返回expr3.</span><br><span class="line">IF(expr1,expr2,expr3)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT IF(1&gt;2,2,3);</span><br><span class="line">        -&gt; 3</span><br><span class="line">mysql&gt; SELECT IF(1&lt;2,&#x27;yes&#x27;,&#x27;no&#x27;);</span><br><span class="line">        -&gt; &#x27;yes&#x27;</span><br><span class="line">mysql&gt; SELECT IF(STRCMP(&#x27;test&#x27;,&#x27;test1&#x27;),&#x27;no&#x27;,&#x27;yes&#x27;);</span><br><span class="line">        -&gt; &#x27;no&#x27;</span><br></pre></td></tr></table></figure></li><li><p>ifnull语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 如果expr1不是 NULL， 则IFNULL()返回 expr1；否则返回 expr2。</span><br><span class="line">IFNULL(expr1,expr2)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT IFNULL(1,0);</span><br><span class="line">        -&gt; 1</span><br><span class="line">mysql&gt; SELECT IFNULL(NULL,10);</span><br><span class="line">        -&gt; 10</span><br><span class="line">mysql&gt; SELECT IFNULL(1/0,10);</span><br><span class="line">        -&gt; 10</span><br><span class="line">mysql&gt; SELECT IFNULL(1/0,&#x27;yes&#x27;);</span><br><span class="line">        -&gt; &#x27;yes&#x27;</span><br><span class="line">        </span><br><span class="line">-- 查询学生的省份信息，省份为null的显示成未知</span><br><span class="line">select name,ifnull(province,&#x27;未知&#x27;) from student;</span><br></pre></td></tr></table></figure></li><li><p>nullif语句 – 了解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- Returns NULL if expr1 = expr2 is true, otherwise returns expr1.</span><br><span class="line">-- 如果expr1 = expr2，返回null，否则返回expr1</span><br><span class="line">NULLIF(expr1,expr2)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NULLIF(1,1);</span><br><span class="line">        -&gt; NULL</span><br><span class="line">mysql&gt; SELECT NULLIF(1,2);</span><br><span class="line">        -&gt; 1</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-- 返回字符串的长度（以字节为单位）</span><br><span class="line">select length(&quot;java&quot;); -- 4</span><br><span class="line">select length(&quot;我&quot;); -- 3</span><br><span class="line"></span><br><span class="line">-- char_length(): 返回字符数量</span><br><span class="line">select char_length(&quot;java&quot;); -- 4</span><br><span class="line">select char_length(&quot;我&quot;); -- 1</span><br><span class="line"></span><br><span class="line">-- concat()返回连接的字符串</span><br><span class="line">select concat(name,province) from student; </span><br><span class="line"></span><br><span class="line">-- concat_ws()返回与分隔符连接</span><br><span class="line">select concat_ws(&quot;,&quot;,name,province) from student;</span><br><span class="line"></span><br><span class="line">-- find_in_set(): 第二个参数中第一个参数的索引（位置）</span><br><span class="line">-- MySQL的索引从1开始</span><br><span class="line">select find_in_set(&quot;b&quot;,&quot;a,b,c,d&quot;); -- 2</span><br><span class="line"></span><br><span class="line">-- format(): 返回格式化为指定小数位数的数字</span><br><span class="line">-- format会四舍五入</span><br><span class="line">select format(3.1415926,3); -- 3.142</span><br><span class="line"></span><br><span class="line">-- instr()返回子字符串第一次出现的索引</span><br><span class="line">-- 查找to在&quot;welcome to chengdu&quot;中第一次出现的索引</span><br><span class="line">select instr(&quot;welcome to chengdu&quot;,&quot;to&quot;); -- 9</span><br><span class="line"></span><br><span class="line">-- locate()返回子字符串第一次出现的位置</span><br><span class="line">select locate(&quot;to&quot;,&quot;welcome to chengdu&quot;); -- 9</span><br><span class="line">-- 从位置10开始查找子串的索引</span><br><span class="line">select locate(&quot;to&quot;,&quot;welcome to chengdu&quot;,10); -- 0</span><br><span class="line"></span><br><span class="line">-- lcase()和lower()相同，返回小写</span><br><span class="line">select lcase(&quot;JAVA&quot;); -- java</span><br><span class="line"></span><br><span class="line">-- ucase()和upper()一样，返回大写</span><br><span class="line">select ucase(&quot;java&quot;); -- JAVA</span><br><span class="line"></span><br><span class="line">-- substr(str,pos,len): 返回指定的子字符串</span><br><span class="line">select substr(&quot;welcome&quot;,1,3); -- wel</span><br><span class="line">select substring(&quot;welcome&quot;,1,3);-- wel</span><br><span class="line"></span><br><span class="line">-- trim()：删除前后空格</span><br><span class="line">select trim(&quot;     hello &quot;);</span><br><span class="line">select &quot;    hello &quot;;</span><br></pre></td></tr></table></figure><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html">https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">-- CURRENT_DATE(),CURRENT_DATE,CURDATE():返回当前日期</span><br><span class="line">select current_date();</span><br><span class="line">select current_date;</span><br><span class="line">select curdate();</span><br><span class="line"></span><br><span class="line">-- CURRENT_TIME(),CURRENT_TIME,CURTIME():返回当前时间</span><br><span class="line">select current_time();</span><br><span class="line">select concat_ws(&quot; &quot;,current_date(),current_time()) as time;</span><br><span class="line"></span><br><span class="line">-- CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP,NOW():返回当前日期时间</span><br><span class="line">select current_timestamp();</span><br><span class="line">select now();</span><br><span class="line"></span><br><span class="line">-- ADDDATE(): 将时间值（间隔）添加到日期值</span><br><span class="line">-- 2天后</span><br><span class="line">select adddate(now(),2);</span><br><span class="line"></span><br><span class="line">-- 2天前</span><br><span class="line">select adddate(now(),interval -2 day);</span><br><span class="line">-- 2天后</span><br><span class="line">select adddate(now(),interval 2 day);</span><br><span class="line">-- 2年后</span><br><span class="line">select adddate(now(),interval 2 year);</span><br><span class="line">-- 2小时后</span><br><span class="line">select adddate(now(),interval 2 hour);</span><br><span class="line">-- 2分钟后</span><br><span class="line">select adddate(now(),interval 2 minute);</span><br><span class="line"></span><br><span class="line">-- ADDTIME(): 添加时间</span><br><span class="line">-- ADDTIME()将expr2添加到expr1并返回结果。</span><br><span class="line">-- 其中，Expr1为时间或datetime表达式，expr2为时间表达式。</span><br><span class="line">select addtime(now(),&#x27;2:10&#x27;);</span><br><span class="line"></span><br><span class="line">-- DATE(): 提取日期或日期时间表达式的日期部分</span><br><span class="line">select date(now());</span><br><span class="line">select date(create_time) from student;</span><br><span class="line"></span><br><span class="line">-- DATE_ADD()将时间值（间隔）添加到日期值</span><br><span class="line">-- DATE_SUB()：从日期中减去时间值（间隔）</span><br><span class="line">select date_add(now(),interval 2 day);</span><br><span class="line"></span><br><span class="line">-- DATE_FORMAT(date,format): 日期格式化</span><br><span class="line">select date_format(now(),&quot;%Y年%m月%d日 %H:%i:%s&quot;)</span><br><span class="line"></span><br><span class="line">-- DATEDIFF():两个日期之差</span><br><span class="line">select datediff(now(),&#x27;1990-10-10&#x27;);</span><br><span class="line"></span><br><span class="line">-- DAY(),DAYOFMONTH() 的同义词,返回月中的天</span><br><span class="line">select day(now());</span><br><span class="line">-- DAYNAME()返回工作日的名称,返回星期的名字</span><br><span class="line">select dayname(now());</span><br><span class="line"></span><br><span class="line">-- DAYOFWEEK()返回参数的工作日索引</span><br><span class="line">-- 周日是第一天</span><br><span class="line">select dayofweek(now());</span><br><span class="line"></span><br><span class="line">-- EXTRACT(unit from date)：提取日期的一部分</span><br><span class="line">select extract(year from now());</span><br><span class="line"></span><br><span class="line">-- QUARTER()从日期参数返回季度</span><br><span class="line">select quarter(now());</span><br></pre></td></tr></table></figure><h3 id="转换函数-了解"><a href="#转换函数-了解" class="headerlink" title="转换函数 - 了解"></a>转换函数 - 了解</h3><ul><li><code>CAST(expr AS </code>type<code>)</code><ul><li>*允许的<code>type</code>*类型<ul><li>BINARY[(<em><code>N</code></em>)]</li><li>CHAR[(<em><code>N</code></em>)]</li><li>DATE</li><li>DATETIME[(<em><code>M</code></em>)]</li><li>DECIMAL[(<em><code>M</code></em>[,<em><code>D</code></em>])]</li><li>TIME[(<em><code>M</code></em>)]</li><li>SIGNED [INTEGER]</li><li>UNSIGNED [INTEGER]</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- cast 转换函数</span><br><span class="line">select locate(&#x27;0&#x27;,cast(110 as char));</span><br></pre></td></tr></table></figure><h3 id="位运算-了解"><a href="#位运算-了解" class="headerlink" title="位运算 - 了解"></a>位运算 - 了解</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-and"><code>&amp;</code></a></td><td align="left">按位与</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_right-shift"><code>&gt;&gt;</code></a></td><td align="left">右移</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_left-shift"><code>&lt;&lt;</code></a></td><td align="left">左移</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-xor"><code>^</code></a></td><td align="left">按位异或</td></tr><tr><td align="left">[&#96;</td><td align="left">&#96;](<a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-or">https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-or</a>)</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-invert"><code>~</code></a></td><td align="left">位反转</td></tr></tbody></table><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- md5加密</span><br><span class="line">select md5(111);</span><br><span class="line">-- password()计算并返回密码字符串</span><br><span class="line">select password(123456);-- *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- INET_ATON()：返回 IP 地址的数值</span><br><span class="line">-- ATON  Address To Number</span><br><span class="line"> SELECT INET_ATON(&#x27;10.0.5.9&#x27;); -- 167773449</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-- INET_NTOA():从数值返回 IP 地址</span><br><span class="line">-- NTOA   Number To Address</span><br><span class="line">SELECT INET_NTOA(167773449);-- 10.0.5.9</span><br></pre></td></tr></table></figure><h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- DATABASE()返回默认（当前）数据库名称</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">-- VERSION()返回一个表示 MySQL 服务器版本的字符串</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line">-- USER()客户端提供的用户名和主机名</span><br><span class="line">select user(); -- root@localhost</span><br></pre></td></tr></table></figure><h2 id="单行函数的特点"><a href="#单行函数的特点" class="headerlink" title="单行函数的特点"></a>单行函数的特点</h2><ul><li>以上所讲的函数都是单行函数，也就是以上的函数会<strong>作用在表中每一行数据，一行数据返回一个结果。</strong></li><li>单行函数<strong>可以在select或where后面</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name,char_length(name) from student;</span><br><span class="line">select name from student where char_length(name) = 3;</span><br></pre></td></tr></table></figure><h2 id="order-by子句"><a href="#order-by子句" class="headerlink" title="order by子句"></a>order by子句</h2><p>order by …  按照 … 排序</p><p>ascend:(默认)  升序</p><p>descend： 降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- student按照年龄升序</span><br><span class="line">select * from student order by age;</span><br><span class="line">select * from student order by age asc;</span><br><span class="line"></span><br><span class="line">-- student按照年龄降序</span><br><span class="line">select * from student order by age desc;</span><br><span class="line"></span><br><span class="line">-- student按照sid降序，年龄升序</span><br><span class="line">-- age升序的前提是sid相同</span><br><span class="line">select * from student order by sid desc , age asc;</span><br></pre></td></tr></table></figure><h2 id="limit-子句"><a href="#limit-子句" class="headerlink" title="limit 子句"></a>limit 子句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- offset 表示偏移量，跳过多少条数据，省略不写就是0</span><br><span class="line">-- row_count 行数</span><br><span class="line">LIMIT &#123;[offset,] row_count&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 按照学生的age降序，取出前3条</span><br><span class="line">select * from student order by age desc limit 3;</span><br><span class="line"></span><br><span class="line">-- 按照学生的age降序，从第2条开始获取3条数据</span><br><span class="line">select * from student order by age desc limit 1,3;</span><br><span class="line"></span><br><span class="line">-- 分页查询</span><br><span class="line">-- 一共8条数据</span><br><span class="line">-- 每页显示3条，分页显示</span><br><span class="line">-- limit (页码 - 1) * 每页需要显示的条数 ,每页需要显示的条数</span><br><span class="line">select * from student order by age desc limit 0,3; -- 第一页</span><br><span class="line">select * from student order by age desc limit 3,3; -- 第二页</span><br><span class="line">select * from student order by age desc limit 6,3; -- 第三页</span><br></pre></td></tr></table></figure><h2 id="建表的时候自动更新时间"><a href="#建表的时候自动更新时间" class="headerlink" title="建表的时候自动更新时间"></a>建表的时候自动更新时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表</span><br><span class="line">create table if not exists student (</span><br><span class="line">  _id bigint primary key auto_increment,</span><br><span class="line">sid int unsigned not null unique,</span><br><span class="line">name varchar(12) not null,</span><br><span class="line">age int,</span><br><span class="line">gender char(6) default &#x27;male&#x27;,</span><br><span class="line">province text,</span><br><span class="line">create_time datetime default now(),</span><br><span class="line">    -- on update 表示数据更新的时候，时间也会自动更新</span><br><span class="line">update_time datetime default now() on update now()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 复制表结构</span><br><span class="line">create table student01 like student;</span><br><span class="line"></span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">create table student02 as select * from student;</span><br><span class="line"></span><br><span class="line">-- 将查询得到的数据插入表中</span><br><span class="line">insert into student01 select * from student;</span><br><span class="line"></span><br><span class="line">-- insert into ... select 可以做蠕虫复制</span><br><span class="line">insert into test select * from test;</span><br></pre></td></tr></table></figure><h2 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h2><p>group by … 按照…分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 按照职位分组</span><br><span class="line">-- 使用分组后，select 后面的投影字段需要使用分组字段，不是分组字段作为投影没有意义</span><br><span class="line">select * from emp group by job;</span><br><span class="line"></span><br><span class="line">-- 学生按照省份和性别分组</span><br><span class="line">select province,gender from db01.student group by province,gender;</span><br><span class="line"></span><br><span class="line">-- 使用分组去重 - 小技巧</span><br><span class="line">-- 分组的目的：是为了数据的统计分析</span><br></pre></td></tr></table></figure><h2 id="聚合函数-多行函数-aggregate-functions"><a href="#聚合函数-多行函数-aggregate-functions" class="headerlink" title="聚合函数(多行函数) - aggregate-functions"></a>聚合函数(多行函数) - aggregate-functions</h2><ul><li><p>count(字段)&#x2F;count(常量值)&#x2F;count(*)： 返回返回的行数</p></li><li><p>sum(字段)：返回总和</p></li><li><p>max(): 返回最大值</p></li><li><p>min(): 返回最小值</p></li><li><p>avg():返回参数的平均值</p></li><li><p>group_concat():返回一个连接的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GROUP_CONCAT([DISTINCT] expr [,expr ...]</span><br><span class="line">             [ORDER BY &#123;unsigned_integer | col_name | expr&#125;</span><br><span class="line">                 [ASC | DESC] [,col_name ...]]</span><br><span class="line">             [SEPARATOR str_val])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 统计每个部分的员工人数</span><br><span class="line">-- count(*) 按照一行的数据进行统计，不会忽略null</span><br><span class="line">select deptno, as num from emp group by deptno;</span><br><span class="line">-- count(字段) 按照指定字段的数据进行统计，该字段的值是null会忽略null</span><br><span class="line">select deptno,count(comm) as num from emp group by deptno;</span><br><span class="line">-- count(*) 按照一行的数据进行统计，不会忽略null</span><br><span class="line">select deptno,count(0) as num from emp group by deptno;</span><br><span class="line"></span><br><span class="line">-- 统计员工总人数</span><br><span class="line">-- 没有使用group by，就是把一张表当成一个组</span><br><span class="line">select count(*) from emp;</span><br><span class="line"></span><br><span class="line">-- 统计每种职位的工资总额</span><br><span class="line">select job,sum(sal) from emp group by job;</span><br><span class="line"></span><br><span class="line">-- 统计每种职位的平均工资</span><br><span class="line">select job,format(avg(sal),2) from emp group by job;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>– 统计每种职位的平均工资<br>select job,sum(sal)&#x2F;count(sal) from emp group by job;</p><p>– 统计每种职位的最高工资<br>select job,max(sal) from emp group by job;</p><p>– 统计每种职位的最低工资<br>select job,min(sal) from emp group by job;</p><p>– 统计每种职位的所有工资<br>select job,group_concat(sal order by sal desc separator ‘,’) from emp group by job;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### 聚合函数的特点</span><br><span class="line"></span><br><span class="line">1. 聚合多行数据得到一个结果</span><br><span class="line">2. 聚合函数不能使用在where后面，只能用在select和having后面</span><br><span class="line"></span><br><span class="line">## having 子句</span><br><span class="line"></span><br><span class="line">​``` mysql</span><br><span class="line">-- 查询人数超过2人的职位有哪些</span><br><span class="line">select job,count(*) as sum from emp group by job having sum &gt; 2;</span><br><span class="line"></span><br><span class="line">-- 过滤原始数据在进入内存</span><br><span class="line">select * from emp where sal &gt; 1000;</span><br><span class="line">-- 进入内存再过滤</span><br><span class="line">select * from emp having sal &gt; 1000;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="where-和-having的区别"><a href="#where-和-having的区别" class="headerlink" title="where 和 having的区别"></a>where 和 having的区别</h2><ol><li>where过滤的是原始数据；having过滤的是内存数据</li><li>where能做的having都能做；反之不成立。但是能用where的优先使用where,可以减少加载到内存的数据</li><li>where后面不能使用别名和聚合函数；having可以</li></ol><h2 id="连接查询（多表查询）-SQL92"><a href="#连接查询（多表查询）-SQL92" class="headerlink" title="连接查询（多表查询）- SQL92"></a>连接查询（多表查询）- SQL92</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><ul><li><p>笛卡尔积：表1有m条数据，表2有n条数据，笛卡尔积就是用表1的每一条数据匹配表2中的所有数据，结果就是m*n条数据</p></li><li><p>自连接：就是一张表当成两张表使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其领导</span><br><span class="line">select  e1.ename,e2.ename</span><br><span class="line">    from emp as e1,emp as e2</span><br><span class="line">-- 连接条件</span><br><span class="line">where e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure></li><li><p>等值连接：连接条件使用&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工和部门名称</span><br><span class="line">select e.ename,d.dname</span><br><span class="line">   from emp e , dept d</span><br><span class="line"> where e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></li><li><p>不等值连接：连接条件没有使用&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工的工资等级</span><br><span class="line">select e.ename,e.sal,s.grade</span><br><span class="line">   from emp e, salgrade s</span><br><span class="line"> where e.sal between s.losal and s.hisal;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-- 查询员工和部门名称、工资等级</span><br><span class="line">-- 连接条件的数量 = 连接的表数量 - 1</span><br><span class="line">select e.ename,e.sal,d.dname,s.grade</span><br><span class="line">    from emp e,dept d, salgrade s</span><br><span class="line">where e.deptno = d.deptno and e.sal between s.losal and s.hisal;</span><br><span class="line"></span><br><span class="line">-- 查询工资大于1000的员工和部门名称、工资等级</span><br><span class="line">select e.ename,e.sal,d.dname,s.grade</span><br><span class="line">    from emp e,dept d, salgrade s</span><br><span class="line">where e.sal &gt; 1000 and e.deptno = d.deptno and e.sal between s.losal and s.hisal;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内连接的特点"><a href="#内连接的特点" class="headerlink" title="内连接的特点"></a>内连接的特点</h3><ul><li>只会返回匹配成功的数据，没有匹配上的数据丢失了</li></ul><p>SQL92语法将连接条件放在where中，但是where还有过滤原始数据的功能，所以代码耦合了。所以出现了sql99语法，在SQL99中将连接条件独立出来了。</p><h2 id="连接查询（多表查询）-SQL99"><a href="#连接查询（多表查询）-SQL99" class="headerlink" title="连接查询（多表查询）- SQL99"></a>连接查询（多表查询）- SQL99</h2><h3 id="内连接-inner-join"><a href="#内连接-inner-join" class="headerlink" title="内连接 - inner join"></a>内连接 - inner join</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其领导 -- 自连接</span><br><span class="line">select  e1.ename as emp,e2.ename as leader</span><br><span class="line">   from emp e1 </span><br><span class="line">   join emp e2</span><br><span class="line"> on e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">-- 查询员工和部门名称 -- 等值连接</span><br><span class="line">-- inner可以省略</span><br><span class="line">select e.ename,d.dname</span><br><span class="line">    from emp e inner join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br><span class="line"></span><br><span class="line">-- 查询工资大于1000的员工和部门名称、工资等级</span><br><span class="line">select e.ename,e.sal,d.dname,s.grade</span><br><span class="line">   from emp e join dept d</span><br><span class="line"> -- 连接条件</span><br><span class="line"> on e.deptno  = d.deptno</span><br><span class="line"> join salgrade s</span><br><span class="line"> -- 连接条件</span><br><span class="line"> on e.sal between s.losal and s.hisal</span><br><span class="line"> -- 过滤条件</span><br><span class="line"> where e.sal &gt; 1000 ;</span><br></pre></td></tr></table></figure><p><strong>内连接：只会返回匹配成功的数据，没有匹配上的数据丢失了</strong></p><h3 id="外连接-outer-join"><a href="#外连接-outer-join" class="headerlink" title="外连接 - outer join"></a>外连接 - outer join</h3><blockquote><p>外连接区分主表和从表</p><p>特点：主表的数据无论匹配是否成功都会显示，从表的数据匹配成功就显示数据，否则就是null</p><p> left join 左边的表就是主表，右边的表就是从表</p><p> right join 右边的表就是主表，左边的表就是从表</p><p>所以基于以上的规则：left join  和  right join  通过交换主从表的关系可以达到一样的效果</p></blockquote><h4 id="左外连接-left-join"><a href="#左外连接-left-join" class="headerlink" title="左外连接 - left join"></a>左外连接 - left join</h4><h4 id="右外连接-–-right-join"><a href="#右外连接-–-right-join" class="headerlink" title="右外连接 – right join"></a>右外连接 – right join</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工及其领导，没有领导的员工也要显示</span><br><span class="line">select e1.ename,e2.ename</span><br><span class="line">  -- e1是主表，e2是从表</span><br><span class="line">  from emp e1 left join emp e2</span><br><span class="line">on e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.ename,e2.ename</span><br><span class="line">  -- e1是主表，e2是从表</span><br><span class="line">  from emp e2 right join emp e1</span><br><span class="line">on e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">-- 查询工资大于1000的员工和部门名称、工资等级</span><br><span class="line">select e.ename,e.sal,d.dname,s.grade</span><br><span class="line">   from emp e left join dept d</span><br><span class="line"> -- 连接条件</span><br><span class="line"> on e.deptno  = d.deptno</span><br><span class="line"> left join salgrade s</span><br><span class="line"> -- 连接条件</span><br><span class="line"> on e.sal between s.losal and s.hisal</span><br><span class="line"> -- 过滤条件</span><br><span class="line"> where e.sal &gt; 1000 ;</span><br></pre></td></tr></table></figure><h3 id="交叉连接、自然连接、using子句"><a href="#交叉连接、自然连接、using子句" class="headerlink" title="交叉连接、自然连接、using子句"></a>交叉连接、自然连接、using子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 交叉连接</span><br><span class="line">-- 一般使用交叉连接得到笛卡尔积的结果</span><br><span class="line">select e.*,d.*</span><br><span class="line"> from emp e cross join dept d;</span><br><span class="line"></span><br><span class="line">-- 自然连接</span><br><span class="line">-- Natural join基于两个表中的全部同名列建立连接</span><br><span class="line">-- 弊端：连接条件不灵活</span><br><span class="line">select e.*,d.*</span><br><span class="line"> from emp e natural join dept d;</span><br><span class="line"> </span><br><span class="line"> -- using子句</span><br><span class="line"> -- 如果连接条件的字段名一样，可以使用using子句</span><br><span class="line">select e.ename,d.dname</span><br><span class="line">    from emp e inner join dept d</span><br><span class="line">using(deptno);</span><br><span class="line"></span><br><span class="line">select e.ename,d.dname</span><br><span class="line">    from emp e inner join dept d</span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询：就是其他语句中包含的select语句</p><blockquote><p>注意：</p><p>1.子查询必须写在（）内</p><p>2.子查询在from后面当作表使用，必须有别名</p></blockquote><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 查得所有比“CLARK”工资高的员工的信息</span><br><span class="line">-- 1. 查询“CLARK”工资</span><br><span class="line">select sal from emp where ename = &#x27;CLARK&#x27;;</span><br><span class="line">-- 2. 查询所有员工的工资和1中的结果比较</span><br><span class="line">select ename,sal from emp where sal &gt; (select sal from emp where ename = &#x27;CLARK&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询工资最高的雇员名字和工资。</span><br><span class="line">-- 1. 查询最高工资</span><br><span class="line">select max(sal) from emp;</span><br><span class="line">-- 2. 查询所有员工的工资等于1的结果的</span><br><span class="line">select * from emp where sal = (select max(sal) from emp);</span><br><span class="line"></span><br><span class="line">-- 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息</span><br><span class="line">-- 1. 查询出SCOTT的职务</span><br><span class="line">select job from emp where ename = &quot;SCOTT&quot;;</span><br><span class="line">-- 2. 查询出SCOTT的雇佣时间</span><br><span class="line">select hiredate from emp where ename = &quot;SCOTT&quot;;</span><br><span class="line">-- 3. 查询所有员工职务等于1的结果，雇佣时间小于2的结果</span><br><span class="line">select * from emp where job = (select job from emp where ename = &quot;SCOTT&quot;)</span><br><span class="line">and hiredate &lt; (select hiredate from emp where ename = &quot;SCOTT&quot;);</span><br></pre></td></tr></table></figure><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><p>多行子查询返回多行记录</p><p>对多行子查询只能使用多行记录比较运算符</p><p>ALL 和子查询返回的所有值比较</p><p>ANY 和子查询返回的任意一个值比较; SOME是ANY的别名</p><p>IN 等于列表中的任何一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资低于任意一个&#x27;CLERK&#x27;的工资的雇员信息。</span><br><span class="line">-- 1. 查询出所有&#x27;CLERK&#x27;的工资</span><br><span class="line">select sal from emp where job = &#x27;CLERK&#x27;;</span><br><span class="line">-- 2. 查询所有员工的工资低于1中任意一个值</span><br><span class="line">select * from emp where sal &lt;any (select sal from emp where job = &#x27;CLERK&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询工资低于任意一个&#x27;CLERK&#x27;的工资的雇员信息。</span><br><span class="line">select * from emp where sal &lt; (select max(sal) from emp where job = &#x27;CLERK&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询工资比所有的 &#x27;SALESMAN&#x27;都高的雇员的编号、名字和工资。</span><br><span class="line">-- 1. 查询出所有&#x27;SALESMAN&#x27;的工资</span><br><span class="line">select sal from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line">-- 2. 查询所有员工的工资高于1中所有值</span><br><span class="line">select * from emp where sal &gt;all(select sal from emp where job = &#x27;SALESMAN&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询部门20中职务同部门10的雇员一样的雇员信息。</span><br><span class="line">-- 1.查询部门10中职务有哪些</span><br><span class="line">select job from emp where deptno = 10;</span><br><span class="line">-- 2.查询部门20中职务在1的结果中的</span><br><span class="line">select * from emp where deptno = 20 and job in (select job from emp where deptno = 10);</span><br><span class="line"></span><br><span class="line">-- 查询在雇员中有哪些人是领导</span><br><span class="line">-- 1. 查询出领导的员工编号</span><br><span class="line">select mgr from emp;</span><br><span class="line">-- 2. 查询员工的编号在1的结果中的</span><br><span class="line">select * from emp where empno in (select mgr from emp);</span><br><span class="line"></span><br><span class="line">-- 找出部门编号为20的所有员工中收入最高的职员</span><br><span class="line">-- 1. 查询部门编号为20的所有员工最高工资</span><br><span class="line">select max(sal) from emp where deptno = 20;</span><br><span class="line">-- 2. 查询部门编号为20的所有员工工资等于1的结果的</span><br><span class="line">select * from emp where deptno = 20 and sal = (select max(sal) from emp where deptno = 20);</span><br><span class="line"></span><br><span class="line">-- 找出部门编号为20的所有员工中收入最高的职员</span><br><span class="line">select * from emp</span><br><span class="line">where sal &gt;= all(</span><br><span class="line">select sal from emp where deptno = 20)</span><br><span class="line">and deptno = 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询每个部门平均薪水的等级</span><br><span class="line">-- 1. 查询每个部门平均薪水</span><br><span class="line">select avg(sal) from emp group by deptno;</span><br><span class="line">-- 2. 将1的结果和工资等级进行连接查询</span><br><span class="line">select e.avg,s.grade</span><br><span class="line">-- 子查询在from后面当作表使用，必须有别名</span><br><span class="line">  from (select avg(sal) as avg from emp group by deptno) e</span><br><span class="line">  join salgrade s</span><br><span class="line">on  e.avg between s.losal and s.hisal;</span><br></pre></td></tr></table></figure><h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- exists(select语句)： 相关子查询</span><br><span class="line">-- 外部的查询是否返回数据取决于 select子查询语句</span><br><span class="line">-- select子查询语句有结果，外部查询就会执行返回结果；否则外部查询没有返回结果</span><br><span class="line">-- 最终的结果只有外部查询的，内部查询的</span><br><span class="line">-- 内部查询在这里仅仅是一个开关</span><br><span class="line">select * from emp where exists (select * from emp where sal = 10000);</span><br></pre></td></tr></table></figure><h2 id="视图-View"><a href="#视图-View" class="headerlink" title="视图 - View"></a>视图 - View</h2><p>视图是从若干基本表和（或）其他视图构造出来的表。也就是说视图也是表，是一张虚拟表。</p><p><strong>操作视图的数据其实还是操作的是基本表的数据</strong></p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE</span><br><span class="line">    [OR REPLACE]</span><br><span class="line">    VIEW view_name [(column_list)]</span><br><span class="line">    AS select_statement</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create view emp_view as select empno,ename,job,mgr,hiredate,deptno from emp;</span><br><span class="line"></span><br><span class="line">-- 如果不存在就创建；存在就替换</span><br><span class="line">create or replace view emp_view as select empno,ename,job,mgr,deptno from emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 操作视图其实操作的是原始数据</span><br><span class="line">update emp_view set job = &quot;SALESMAN&quot; where ename =&quot;smith&quot;;</span><br><span class="line">delete from emp where ename =&quot;smith&quot;;</span><br><span class="line"></span><br><span class="line">-- 聚合函数生成的视图不能增加、删除、修改数据</span><br><span class="line">create or replace view emp_view01 as select max(sal) as max_sal from emp;</span><br><span class="line"></span><br><span class="line">update emp_view01 set max_sal = 10000;</span><br><span class="line"></span><br><span class="line">delete from emp_view01;</span><br><span class="line"></span><br><span class="line">insert into emp_view01 values(10000);</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">drop view emp_view01;</span><br><span class="line"></span><br><span class="line">-- 查询当前所有的数据库</span><br><span class="line">show databases;</span><br><span class="line">-- 查询当前库下的所有表</span><br><span class="line">show tables;</span><br><span class="line">-- 查询所有表及其类型</span><br><span class="line">show full tables;</span><br><span class="line">-- 查询指定数据库的所有表</span><br><span class="line">show tables from db01;</span><br></pre></td></tr></table></figure><h3 id="视图的总结"><a href="#视图的总结" class="headerlink" title="视图的总结"></a>视图的总结</h3><ol><li>视图对应一个查询语句；视图是（从若干基本表和（或）其他视图构造出来的）表</li><li>视图进行查询，添加，修改，删除，其实就是对背后的表进行相应操作</li><li>虚表 在创建一个视图时，只是存放的视图的定义，也即是动态检索数据的查询语句，而并不存放视图对应的数据</li><li>视图的好处<ul><li>安全 可以只显示部分行部分列的数据;可以对添加的数据进行检查；可以设置为只读视图</li><li>操作简单 </li><li>只显示多个数据库表的部分列，部分行的视图</li><li>聚合函数生成的视图不能增加、删除、修改数据</li></ul></li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220402143925195.png" alt="image-20220402143925195"></p><p><strong>Innodb支持事务和外键；MyISAM不支持事务和外键</strong></p><h2 id="MySQL事务-transaction"><a href="#MySQL事务-transaction" class="headerlink" title="MySQL事务 - transaction"></a>MySQL事务 - transaction</h2><p>事务：完成一个事情需要的一系列步骤(操作)，这些操作要么同时成功，要么同时失败</p><p><strong>在MySQL中DML一条语句就是一个事务，且事务自动提交的。</strong></p><p>在实际开发中有时候我们需要将多条语句变成一个整体，他们要么都成功，要么都是失败。此时就需要将多条语句做成一个事务。</p><h3 id="事务的基本操作"><a href="#事务的基本操作" class="headerlink" title="事务的基本操作"></a>事务的基本操作</h3><p>1 开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure><p>2 提交事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><p>3 回滚事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><p>注意：一旦使用start transaction;开启事务那么自动提交将失效</p><p> 如果所有操作都正常执行使用commit;提交事务</p><p> 当发生异常情况回滚事务，数据(此时为tb_account表)通常回滚到开启事务之前的状态</p><h3 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 张三给李四转100元</span><br><span class="line">-- 开启事务</span><br><span class="line">start transaction;</span><br><span class="line">  update account set money = money - 100 where name = &#x27;zhangsan&#x27;;</span><br><span class="line">  update account set money = money + 100 where name = &#x27;lisi&#x27;;</span><br><span class="line">commit; -- 提交事务，事务结束</span><br><span class="line">rollback; -- 回滚事务，事务结束</span><br></pre></td></tr></table></figure><p>事务是用来控制DML语句的。DQL不会修改原始数据，所以DQL不需要事务。</p><h3 id="事务的ACID四大特性"><a href="#事务的ACID四大特性" class="headerlink" title="事务的ACID四大特性"></a>事务的ACID四大特性</h3><ul><li>原子性(Atomicity): 事务中的语句不可再分，是一个整体。要么同时成功，要么同时失败</li><li>一致性(Consistency)： 事务执行前和事务执行后数据是一致的。比如转帐前总计金额是1300；转账后总计金额是1300</li><li>隔离性(Isolation): 事务之间是彼此隔离的，一个事务的操作不会影响另一个事务。但是隔离性受隔离级别的影响。</li><li>持久性(Durability)：事务一旦提交就会将数据写入文件持久化存储。</li></ul><h3 id="事务的隔离级别-理解"><a href="#事务的隔离级别-理解" class="headerlink" title="事务的隔离级别 - 理解"></a>事务的隔离级别 - 理解</h3><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><ul><li>读未提交（read-uncommitted）<ul><li>事务1修改了数据但是还没有提交，此时事务2就读取到了事务1还没有提交的数据。</li><li>会产生脏读。解决办法：提升隔离级别</li></ul></li><li>读已提交（read-committed）<ul><li>开启事务1和事务2，事务1和事务2读取到了表中原来的数据，此时事务1修改了表中的数据，并提交事务。事务2在同一次事务中读到了不同的数据。</li><li>解决了脏读，但是出现了<strong>不可重复读</strong></li><li>不可重复读： 就是在同一次事务中读取到的数据不相同</li><li>如何解决不可重复读:提升隔离级别</li></ul></li><li>可重复读（repeatable-read）<ul><li>开启事务1和事务2,无论事务1是否提及事务,事务2读取到的数据都是一样.</li><li>解决了不可重复读, 但是出现了<strong>幻读</strong></li><li>解决幻读。解决办法：提升隔离级别</li></ul></li><li>串行化（serializable）<ul><li>事务加锁了,事务只能串行执行了.</li><li>安全性最高,效率最低</li></ul></li></ul><p><strong>MySQL默认的隔离级别是可重复读（repeatable-read）</strong></p><ul><li><p>查询隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level  READ UNCOMMITTED;</span><br><span class="line">set session transaction isolation level  READ COMMITTED;</span><br><span class="line">set session transaction isolation level  REPEATABLE READ;</span><br><span class="line">set session transaction isolation level  serializable;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库设计原则-三范式"><a href="#数据库设计原则-三范式" class="headerlink" title="数据库设计原则 - 三范式"></a>数据库设计原则 - 三范式</h2><h3 id="概念（NF-x3D-NormalForm）"><a href="#概念（NF-x3D-NormalForm）" class="headerlink" title="概念（NF&#x3D; NormalForm）"></a>概念（NF&#x3D; NormalForm）</h3><p>遵循一定的规则。在关系型数据库中这种规则就称为范式</p><h3 id="三范式的作用"><a href="#三范式的作用" class="headerlink" title="三范式的作用"></a>三范式的作用</h3><ul><li>结构合理</li><li>冗余较小</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>性能降低</li><li>多表查询比单表查询速度慢</li></ul><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p> 必须要有主键，字段不可再分</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220402155135097.png" alt="image-20220402155135097"></p><p>以上的表就不满足第一范式，虽然有主键，但是address可以再分。修改如下：</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/image-20220402155327349.png" alt="image-20220402155327349"></p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>在第一范式的基础上，需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p><p>（非主键字段必须全部依赖主键字段，而不能部分依赖）</p><p>学号和课程编号作为联合主键</p><p>课程名称只依赖于课程编号，而和学号没有关系</p><p><img src="E:/MySQL.assets/wps1.jpg" alt="img"></p><p>分析以上的设计发现数据冗余。学生只依赖主键中的学号；课程名称只依赖主键中的课程编号。违背第二范式。修改如下：</p><p>学生表</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/wps2.jpg" alt="img"> </p><p>2，课程表</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/wps3.jpg" alt="img"> </p><p>3，选课表</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/wps4.jpg" alt="img"> </p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>在第二范式的基础上，确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p>（非主键字段必须直接依赖主键字段，不能间接依赖）</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/wps5.jpg" alt="img"></p><p>以上数据冗余。班级名称和班级信息直接依赖班级编号，班级编号直接依赖主键学号，所以班级名称和班级信息间接依赖了主键学号。所以违背了第三范式。</p><p>修改如下：</p><p><strong>学生表</strong></p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/02%20MaSQL/MySQL.assets/wps6.jpg" alt="img"> </p><p><strong>班级表</strong></p><p><img src="E:/MySQL.assets/wps7.jpg" alt="img"></p><h2 id="MySQL用户管理和权限"><a href="#MySQL用户管理和权限" class="headerlink" title="MySQL用户管理和权限"></a>MySQL用户管理和权限</h2><blockquote><p>在MySQL中用户的唯一标识是： <code>&#39;用户名&#39;@&#39;主机名&#39;</code></p><p>用户名：就是创建的用户的名字</p><p>主机名：指定该用户在哪个主机上可以登陆。localhost表示该用户只能在本机登录。如果想让该用户可以从任意远程主机登陆，可以使用通配符%</p></blockquote><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER [IF NOT EXISTS]</span><br><span class="line">    user(用户名) [auth_option] [, user [auth_option]] ...</span><br><span class="line">    [password_option | lock_option] ...</span><br><span class="line"></span><br><span class="line">auth_option: &#123;</span><br><span class="line">    IDENTIFIED BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin</span><br><span class="line">  | IDENTIFIED WITH auth_plugin BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin AS &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED BY PASSWORD &#x27;auth_string&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">password_option: &#123;</span><br><span class="line">    PASSWORD EXPIRE</span><br><span class="line">  | PASSWORD EXPIRE DEFAULT</span><br><span class="line">  | PASSWORD EXPIRE NEVER</span><br><span class="line">  | PASSWORD EXPIRE INTERVAL N DAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建zhangsan用户</span><br><span class="line">-- &#x27;zhangsan&#x27;@&#x27;localhost&#x27; 表示张三只能在本地连接数据库</span><br><span class="line">create user &#x27;zhangsan&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- &#x27;zhangsan&#x27;@&#x27;%&#x27; 表示张三只能在任意的主机上远程连接数据库</span><br><span class="line">-- 无主机登录</span><br><span class="line">create user &#x27;zhangsan&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER [IF EXISTS]</span><br><span class="line">    user [auth_option] [, user [auth_option]] ...</span><br><span class="line"></span><br><span class="line">ALTER USER [IF EXISTS]</span><br><span class="line">    USER() IDENTIFIED BY &#x27;auth_string&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auth_option: &#123;</span><br><span class="line">    IDENTIFIED BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin</span><br><span class="line">  | IDENTIFIED WITH auth_plugin BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin AS &#x27;auth_string&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 修改用户的密码</span><br><span class="line">alter user &#x27;zhangsan&#x27;@&#x27;%&#x27; identified by &#x27;234567&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER [IF EXISTS] user [, user] ...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;zhangsan&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GRANT</span><br><span class="line">    priv_type [(column_list)]</span><br><span class="line">      [, priv_type [(column_list)]] ...</span><br><span class="line">    ON  priv_level</span><br><span class="line">    TO user [auth_option] [, user [auth_option]] ...</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">priv_level: &#123;</span><br><span class="line">  *.*</span><br><span class="line">  | db_name.*</span><br><span class="line">  | db_name.tbl_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auth_option: &#123;</span><br><span class="line">    IDENTIFIED BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin</span><br><span class="line">  | IDENTIFIED WITH auth_plugin BY &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED WITH auth_plugin AS &#x27;auth_string&#x27;</span><br><span class="line">  | IDENTIFIED BY PASSWORD &#x27;auth_string&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 授权</span><br><span class="line">-- 给用户&#x27;zhangsan&#x27;@&#x27;%&#x27;授予所有库下所有被的所有操作权限</span><br><span class="line">grant all on *.* to &#x27;zhangsan&#x27;@&#x27;%&#x27; identified by &#x27;234567&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REVOKE</span><br><span class="line">    priv_type [(column_list)]</span><br><span class="line">      [, priv_type [(column_list)]] ...</span><br><span class="line">    ON [object_type] priv_level</span><br><span class="line">    FROM user [, user] ...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 取消授权</span><br><span class="line">revoke all on *.* from &#x27;zhangsan&#x27;@&#x27;%&#x27; ;</span><br><span class="line">-- 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><p>索引（index）: MySQL存储引擎为了<strong>提高查询效率</strong>而设计的一种数据结构。</p><p>索引相当于 字典中的索引目录。</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><ul><li><p>主键索引：primary key</p></li><li><p>唯一索引:  unique</p></li><li><p>普通索引（单列索引，单值索引）: 就是给一个字段添加索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name</span><br><span class="line">    ON tbl_name (key_part,...)</span><br><span class="line">    [index_option]</span><br><span class="line">    [algorithm_option | lock_option] ...</span><br><span class="line"></span><br><span class="line">key_part:</span><br><span class="line">    col_name [(length)] [ASC | DESC]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表的时候，创建索引</span><br><span class="line">create table test01(</span><br><span class="line">  id int primary key,</span><br><span class="line">name char(10),</span><br><span class="line">age tinyint unsigned,</span><br><span class="line">gender char(6),</span><br><span class="line">-- 创建普通索引</span><br><span class="line">key(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 表已经存在，创建索引</span><br><span class="line">-- 给test表的name字段创建索引</span><br><span class="line">create index index_name on test (name);</span><br></pre></td></tr></table></figure></li><li><p>复合索引：多个字段联合作为索引字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">create table test02(</span><br><span class="line">  id int primary key,</span><br><span class="line">name char(10),</span><br><span class="line">age tinyint unsigned,</span><br><span class="line">address char(10),</span><br><span class="line">gender char(6),</span><br><span class="line">-- 创建复合索引</span><br><span class="line">key(name,age,address)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test02 values(1,&#x27;zhangsan&#x27;,20,&#x27;beijing&#x27;,&#x27;male&#x27;);</span><br><span class="line">insert into test02 values(5,&#x27;lisi&#x27;,21,&#x27;tianjin&#x27;,&#x27;male&#x27;);</span><br><span class="line">insert into test02 values(2,&#x27;wangwu&#x27;,22,&#x27;beijing&#x27;,&#x27;male&#x27;);</span><br><span class="line">insert into test02 values(4,&#x27;zhaosi&#x27;,20,&#x27;shanghai&#x27;,&#x27;male&#x27;);</span><br><span class="line">insert into test02 values(3,&#x27;lily&#x27;,23,&#x27;chengdu&#x27;,&#x27;female&#x27;);</span><br><span class="line"></span><br><span class="line">-- 复合索引原则：</span><br><span class="line">-- 最左前缀匹配</span><br><span class="line">-- MySQL为了更好的使用索引，所以在使用索引字段的时候会调整顺序</span><br><span class="line">explain select * from test02 where name = &#x27;lisi&#x27;; -- ok</span><br><span class="line">explain select * from test02 where name = &#x27;lisi&#x27; and age = 22; -- ok</span><br><span class="line">explain select * from test02 where name = &#x27;lisi&#x27; and age = 22 and address = &#x27;chengdu&#x27;; -- ok </span><br><span class="line">explain select * from test02 where name = &#x27;lisi&#x27; and address = &#x27;chengdu&#x27;; -- ok</span><br><span class="line"></span><br><span class="line">explain select * from test02 where name = &#x27;lisi&#x27; and address = &#x27;chengdu&#x27; and age = 22; -- ok</span><br><span class="line"></span><br><span class="line">explain select * from test02 where address = &#x27;chengdu&#x27; and name = &#x27;lisi&#x27; and age = 22 ; -- ok</span><br><span class="line">explain select * from test02 where age = 22 and address = &#x27;chengdu&#x27; and name = &#x27;lisi&#x27;;</span><br><span class="line"></span><br><span class="line">-- 因为没有使用最左的索引字段，所以索引失效</span><br><span class="line">explain select * from test02 where age = 22 and address = &#x27;chengdu&#x27;; -- not ok</span><br><span class="line">-- % 开头索引会失效</span><br><span class="line">explain select * from test02 where name like &#x27;%lisi&#x27; and address = &#x27;chengdu&#x27;; -- not ok</span><br><span class="line">-- _ 开头索引会失效</span><br><span class="line">explain select * from test02 where name like &#x27;_lisi&#x27; and address = &#x27;chengdu&#x27;; -- not ok</span><br></pre></td></tr></table></figure></li><li><p>全文索引（MySQL的全文索引基本不用）- 了解</p></li></ul><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON tbl_name</span><br></pre></td></tr></table></figure><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提升了查询效率</li><li>减少了磁盘的IO</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加了磁盘空间</li><li>降低了DML语句的了效率。因为增加、删除、修改数据都会影响索引文件的变动。Innodb中的索引使用B+Tree的数据结构，索引数据发生变化后，B+Tree为了保证平衡，会进行树的自旋转，所以会影响性能。</li></ul><h3 id="创建索引的注意点"><a href="#创建索引的注意点" class="headerlink" title="创建索引的注意点"></a>创建索引的注意点</h3><ul><li>经常更新的数据不宜使用索引。</li><li>值范围太小的字段不宜使用索引。比如：性别字段</li><li>Blob和Text字段不使用索引</li><li>数据量低于1000 行数据不建议使用索引</li><li>经常出现在where中的字段推荐使用索引</li><li>经常出现在group by中的字段推荐使用索引</li><li>经常出现在order by中的字段推荐使用索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/post/f255ffad.html"/>
      <url>/post/f255ffad.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker的目标是实现经量级的操作系统虚拟化解决方案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">轻量级：</span><br><span class="line">与传统的虚拟机相比，docker是一个更轻量级的虚拟化技术</span><br><span class="line">也就是说docker本身是一个软件，但是我们可以使用这个软件安装各种其他软件</span><br><span class="line">比如linux、mysql、tomcat。。。。</span><br><span class="line"></span><br><span class="line">区别：传统虚拟机需要下载安装指定软件的完整版本</span><br><span class="line">比如我们要安装一个linux版本的mysql</span><br><span class="line">那么传统的虚拟机就必须先安装一个完成的linux系统再下载安装一个完整的mysql</span><br><span class="line">但是使用docker直接就下载安装mysql就行了，docker会自动的将mysql需要的linux系统的核心部分下载</span><br><span class="line"></span><br><span class="line">操作系统虚拟化：</span><br><span class="line">docker不需要安装一个额外的完整的操作系统</span><br></pre></td></tr></table></figure><p>Docker的基础是Linux容器（LXC）等技术。在LXC的基础上Docker进行了进一步的封装，让用户不需要关心容器的管理，使得操作更加简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LXC(容器技术):这是DOCKER的核心思想</span><br><span class="line">容器技术的好处：</span><br><span class="line">1.每一个容器中都可以安装自己的软件</span><br><span class="line">2.所有容器之间是互相隔离的</span><br><span class="line">3.容器之间可以共享组件</span><br><span class="line">比如a容器安装了tomcat9 ， tomcat9依赖于jdk</span><br><span class="line">后面在b容器需要安装tomcat10, tomcat10也依赖jdk,就直接使用之前下载好的jdk</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户操作Docker的容器就像操作一个快速轻量级的虚拟机一样简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker将对容器的操作封装成了很多很简洁的命令供我们使用</span><br></pre></td></tr></table></figure><h2 id="为什么要使用docker"><a href="#为什么要使用docker" class="headerlink" title="为什么要使用docker"></a>为什么要使用docker</h2><p>1.docker启动速度非常的快 ,是秒级的，传统虚拟机启动速度是分钟级</p><p>2.Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个Docker 容器</p><p>3.更快的部署  使用docker部署一个全新的环境速度非常高</p><p>4.更轻松的迁移      因为每一个容器中包含了需要的操作系统的核心部分，所以如果要迁移其他的操作系统的服务器中，对容器是完全没有影响的</p><p>5.更方便的管理</p><p>​docker设计很方便的操作容器的命令</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>注意：必须使用linux7以及以上版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装docker</span><br><span class="line">yum install -y docker</span><br><span class="line"># 启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"># 设置docker开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line"># 查看docker版本</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="docker的hello-world"><a href="#docker的hello-world" class="headerlink" title="docker的hello-world"></a>docker的hello-world</h2><ol><li>从docker的远程仓库拉取hello-world镜像</li><li>运行该镜像生成一个hello-world容器</li></ol><p>镜像：静态的文件</p><p>容器：就是运行镜像文件而在内存生成的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world   # 拉取镜像</span><br><span class="line">docker run hello-world    # 运行镜像生成容器</span><br></pre></td></tr></table></figure><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>1.如何查找镜像的真实名称</p><p><code>[Docker Hub](https://hub.docker.com/)</code></p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/07_Docker/docker.assets/1655178714822.png" alt="1655178714822"></p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/07_Docker/docker.assets/1655178760737.png" alt="1655178760737"></p><ol><li>如何查看自己已经下载了哪些镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="docker加速配置"><a href="#docker加速配置" class="headerlink" title="docker加速配置"></a>docker加速配置</h2><p>我们默认拉取docker镜像的服务器在国外，为了更稳定建议设置阿里云镜像加速</p><p>阿里云镜像的网址:<code>https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcr.console.aliyun.com%2Fcn-hangzhou%2Finstances%2Fmirrors&amp;lang=en</code></p><h2 id="docker-的底层原理"><a href="#docker-的底层原理" class="headerlink" title="docker 的底层原理"></a>docker 的底层原理</h2><h2 id="docker是如何工作的"><a href="#docker是如何工作的" class="headerlink" title="docker是如何工作的"></a>docker是如何工作的</h2><p>只要理解了docker的逻辑之后，学习docker其实重点就是学习命令</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/07_Docker/docker.assets/1655254635803.png" alt="1655254635803"></p><h2 id="docker-run命令的流程"><a href="#docker-run命令的流程" class="headerlink" title="docker run命令的流程"></a>docker run命令的流程</h2><p>其实我们可以不执行docker pull 直接执行docker run</p><p>流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为docker run 后面一定会指定镜像名称</span><br><span class="line">所以执行docker run命令第一件事就是查找该镜像文件是否存在</span><br><span class="line">存在：    直接运行该文件在内存中生成一个docker容器</span><br><span class="line">不存在：  自动的去docker的进行仓库中查找该文件</span><br><span class="line">存在：    自动下载该文件，然后运行该文件</span><br><span class="line">不存在：  报错</span><br></pre></td></tr></table></figure><h1 id="docker相关的命令"><a href="#docker相关的命令" class="headerlink" title="docker相关的命令"></a>docker相关的命令</h1><h3 id="镜像相关的命令"><a href="#镜像相关的命令" class="headerlink" title="镜像相关的命令"></a>镜像相关的命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker images 查看所有的镜像</span><br><span class="line">docker pull 镜像名称：     拉取指定名称的镜像</span><br><span class="line">docker rmi 镜像名称/镜像id:   删除指定镜像</span><br><span class="line">此命令有些镜像删除不了，比如指定的镜像有子镜像</span><br><span class="line">建议为此镜像添加一个参数： -f ,表示强制删除</span><br><span class="line">docker rmi -f 镜像名称/镜像id: 强制删除指定镜像</span><br><span class="line">docker rmi -f $(docker images -qa) :删除所有镜像。本质是使用子命令</span><br><span class="line">docker search 镜像名称：  到docker仓库查找指定名称的镜像</span><br></pre></td></tr></table></figure><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像名称：   运行指定容器</span><br><span class="line"> --name 为运行的容器指定名称</span><br><span class="line"> -d     指定容器以后台形式运行</span><br><span class="line"> -it    以交互模式运行容器，并分配一个伪终端</span><br><span class="line"> -p:    指定端口映射</span><br><span class="line"></span><br><span class="line">docker ps: 查询所有运行中的主容器</span><br><span class="line">docker ps -a： 查询 所有的容器包括没有运行的以及子容器</span><br><span class="line">docker rm -f 容器名称/容器的id: 强制删除指定的容器，如果有子容器一起干掉</span><br><span class="line">docker rm -f $(docker ps -qa): 删除所有的容器</span><br><span class="line"></span><br><span class="line">docker exec -it 容器名称/容器id bash: 进入指定的容器</span><br><span class="line"></span><br><span class="line">docker stop 容器名称/容器id: 停止指定的容器</span><br><span class="line">docker kill 容器名称/容器id: 强制停止指定的容器</span><br><span class="line">docker start 容器名称/容器id: 运行指定的容器</span><br><span class="line">docker restart 容器名称/容器id:重启指定的容器</span><br><span class="line">docker logs 容器名称/容器id: 查看指定容器的日志</span><br><span class="line">docker top 容器名称/容器id: 查看容器运行的进程</span><br><span class="line">docker inspect 容器名称/容器id: 查看容器内部的所有细节</span><br><span class="line">docker cp 宿主机的文件路径 容器名称/容器id:容器中的路径    将文件从宿主机复制到容器中</span><br><span class="line">docker cp 容器名称/容器id:容器中的路径 宿主机的文件路径     将文件从容器中复制到宿主机</span><br></pre></td></tr></table></figure><h1 id="docker镜像的详解"><a href="#docker镜像的详解" class="headerlink" title="docker镜像的详解"></a>docker镜像的详解</h1><p>镜像就是一个静态的文件</p><h2 id="unionfs"><a href="#unionfs" class="headerlink" title="unionfs"></a>unionfs</h2><p>uninofs:联合文件系统</p><p>镜像文件就使用了unionfs</p><p><img src="E:/%E7%AC%94%E8%AE%B0%E6%9C%AC/java/07_Docker/docker.assets/image-20220615105433011.png" alt="image-20220615105433011"></p><h2 id="镜像的特点"><a href="#镜像的特点" class="headerlink" title="镜像的特点"></a>镜像的特点</h2><p>镜像本身是只读的</p><p>但是在运行容器的时候，会在原镜像上面再套一层形成一个新的镜像</p><p>作用：用来对原镜像的内容进行修改</p><p>套的这一层一定在最外层，称之为容器层</p><p>下面的就称之为镜像层</p><h1 id="镜像的commit操作"><a href="#镜像的commit操作" class="headerlink" title="镜像的commit操作"></a>镜像的commit操作</h1><p>当我们运行一个容器的时候，会在对应的镜像外面加一层，也就是容器层，我们可以修改响应的数据</p><p>修改完之后，我们就可以提交这个容器</p><p>效果：将修改之后的内容保存为一个静态的镜像文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;新的镜像的信息&quot; -a=&quot;作者信息&quot; 容器名称/id  自定义新镜像的名称[:tag]</span><br></pre></td></tr></table></figure><p>测试：运行tomcat镜像生成容器，然后想容器中添加ROO项目，然后将该容器保存为自定义的镜像文件</p><p>期望效果：以后通过运行我们自定义的镜像文件使用tomcat默认就有ROOT项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.运行默认的tomcat</span><br><span class="line">2.将ROOT项目复制到tomcat容器的webapps目录中</span><br><span class="line">3.将运行的容器持久化为自定义的镜像文件</span><br><span class="line">docker commit -m=&quot;add ROOT project to the default tomcat image&quot; -a=&quot;cd2203&quot; tomcat mytomcat:1.0</span><br><span class="line">4.运行自定义的镜像文件查看效果</span><br><span class="line"> docker run --name mytomcat -p 8082:8080 -d mytomcat:1.0</span><br><span class="line">5.测试访问该容器查看修改的内容是否默认就生效了</span><br></pre></td></tr></table></figure><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p>我们如果使用commit操作可以将容器中的数据持久化到镜像文件中</p><p>但是这个操作不适合频繁修改容器数据的场景</p><p>建议使用容器数据卷的方式来处理数据需要频繁修改的持久化场景</p><p>逻辑：</p><p>容器数据卷就是对应容器中的每一个具体的文件或者目录</p><p>将这个文件与宿主机中的某个文件映射起来</p><p>效果：在容器中修改了文件，那么宿主机中对应的文件会自动的一起修改</p><p>因为宿主机中的文件本身就是持久化，所以下次启动容器的时候还是与宿主机中的文件产生映射，那么容器启动后就拥有了宿主机中的文件了</p><p>注意：修改容器中的数据卷  宿主机的文件会相应的变化</p><p>​          修改宿主机中的文件 容器中的数据卷也会相应的变化</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run   -v 宿主机文件路径:容器的数据卷的路径  镜像名称 </span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行一个mysql容器，将该容器中存放具体数据的目录与宿主机的指定目录映射起来</span><br><span class="line">效果：如果mysql容器挂掉了，以后启动新的mysql容器可以将之前操作的数据找回来</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line">docker run --name mysql -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/local/mysql:/var/lib/mysql mysql:5.7</span><br><span class="line"></span><br><span class="line">效果：容器中的数据会及时的更新到宿主机的目录中</span><br></pre></td></tr></table></figure><h1 id="dockerfile的基本使用"><a href="#dockerfile的基本使用" class="headerlink" title="dockerfile的基本使用"></a>dockerfile的基本使用</h1><p>Dockerfile是用来构建Docker镜像的文件，是由一系列的命令和参数构成的脚本</p><p>也就是说我们可以通过Dockerfile编写相应的指令的方式来指定新的镜像由哪些内容组成，然后将该文件build成一个新的自定义镜像</p><p>学习重点：</p><p>如何编写dockerfile</p><ul><li>编写dockerfile</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM centos:7</span><br><span class="line"># 设置变量</span><br><span class="line">ENV ROOT_PATH /root/</span><br><span class="line"># 引用变量</span><br><span class="line">WORKDIR $ROOT_PATH</span><br><span class="line"># 执行指定命令</span><br><span class="line">RUN yum install -y vim</span><br><span class="line">CMD &quot;/bin/bash&quot;</span><br></pre></td></tr></table></figure><ul><li>使用dockerfile构建新镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile -t mycentos:1.0 .</span><br></pre></td></tr></table></figure><p>注意，最有有一个小数点  表示指定当前目录</p><ul><li>运行新的镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it mycentos:1.0</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>执行vim命令，发现有vim工具可使用了，说明新镜像构建成功</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
